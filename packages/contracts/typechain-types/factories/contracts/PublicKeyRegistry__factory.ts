/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PublicKeyRegistry,
  PublicKeyRegistryInterface,
} from "../../contracts/PublicKeyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "providerId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "checkPublicKey",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "isPublicKeyHashValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "providerId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    name: "setPublicKeyValid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "providerId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
        ],
        internalType: "struct PublicKeyRegistry.PublicKeyValidity[]",
        name: "validity",
        type: "tuple[]",
      },
    ],
    name: "setPublicKeysValid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61052b806100a06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fd578063abcf87c614610125578063c059d83b14610138578063f2fde38b1461014b57600080fd5b80635879142a14610082578063715018a6146100c557806380a798cf146100cf575b600080fd5b6100b061009036600461038b565b600091825260016020908152604080842092845291905290205460ff1690565b60405190151581526020015b60405180910390f35b6100cd61015e565b005b6100b06100dd36600461038b565b600160209081526000928352604080842090915290825290205460ff1681565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bc565b6100cd6101333660046103ad565b610172565b6100cd610146366004610439565b61020a565b6100cd61015936600461046e565b61025a565b6101666102c3565b6101706000610316565b565b61017a6102c3565b60005b818110156102055736838383818110610198576101986104ab565b90506060020190508060400160208101906101b391906104da565b8135600090815260016020818152604080842095820135845294905292902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790550161017d565b505050565b6102126102c3565b6000928352600160209081526040808520938552929052912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6102626102c3565b73ffffffffffffffffffffffffffffffffffffffff81166102b7576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6102c081610316565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610170576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102ae565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561039e57600080fd5b50508035926020909101359150565b600080602083850312156103c057600080fd5b823567ffffffffffffffff8111156103d757600080fd5b8301601f810185136103e857600080fd5b803567ffffffffffffffff8111156103ff57600080fd5b85602060608302840101111561041457600080fd5b6020919091019590945092505050565b8035801515811461043457600080fd5b919050565b60008060006060848603121561044e57600080fd5b833592506020840135915061046560408501610424565b90509250925092565b60006020828403121561048057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156104ec57600080fd5b6104a48261042456fea2646970667358221220c1a682c9ba1fa8a954599590058bf6662e7ce496c33d7680302b8cf9abdb592764736f6c634300081b0033";

type PublicKeyRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PublicKeyRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PublicKeyRegistry__factory extends ContractFactory {
  constructor(...args: PublicKeyRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PublicKeyRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PublicKeyRegistry__factory {
    return super.connect(runner) as PublicKeyRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicKeyRegistryInterface {
    return new Interface(_abi) as PublicKeyRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PublicKeyRegistry {
    return new Contract(address, _abi, runner) as unknown as PublicKeyRegistry;
  }
}
