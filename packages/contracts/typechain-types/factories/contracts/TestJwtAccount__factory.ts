/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestJwtAccount,
  TestJwtAccountInterface,
  ZkLogin,
} from "../../contracts/TestJwtAccount";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "accountId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "authProviderId",
            type: "bytes32",
          },
          {
            internalType: "contract PublicKeyRegistry",
            name: "publicKeyRegistry",
            type: "address",
          },
          {
            internalType: "contract UltraVerifier",
            name: "proofVerifier",
            type: "address",
          },
        ],
        internalType: "struct ZkLogin.AccountData",
        name: "accountData_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountData",
    outputs: [
      {
        internalType: "bytes32",
        name: "accountId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "authProviderId",
        type: "bytes32",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry",
        type: "address",
      },
      {
        internalType: "contract UltraVerifier",
        name: "proofVerifier",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "jwtNonce",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ZkLogin.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610adb380380610adb83398101604081905261002f91610093565b805160005560208101516001556040810151600280546001600160a01b03199081166001600160a01b0393841617909155606090920151600380549093169116179055610118565b80516001600160a01b038116811461008e57600080fd5b919050565b600060808284031280156100a657600080fd5b50604051600090608081016001600160401b03811182821017156100d857634e487b7160e01b83526041600452602483fd5b60409081528451825260208086015190830181905292506100fa908501610077565b604082015261010b60608501610077565b6060820152949350505050565b6109b4806101276000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637a28f8bc1461003b578063a8afd3e0146100a6575b600080fd5b60005460015460025460035461006a93929173ffffffffffffffffffffffffffffffffffffffff908116911684565b60408051948552602085019390935273ffffffffffffffffffffffffffffffffffffffff91821684840152166060830152519081900360800190f35b6100b96100b43660046105d9565b6100bb565b005b60408051608081018252600080548252600154602083015260025473ffffffffffffffffffffffffffffffffffffffff9081169383019390935260035490921660608201526101129061010d846106c2565b610184565b905080610180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4a77744163636f756e743a20696e76616c69642070726f6f660000000000000060448201526064015b60405180910390fd5b5050565b6000826040015173ffffffffffffffffffffffffffffffffffffffff16635879142a846020015184606001516040518363ffffffff1660e01b81526004016101d6929190918252602082015260400190565b602060405180830381865afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610217919061079e565b61027d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7075626c6963206b65792068617368206d69736d6174636800000000000000006044820152606401610177565b600061028c8360400151610472565b80519091506003906000906102a190836107ef565b67ffffffffffffffff8111156102b9576102b961061b565b6040519080825280602002602001820160405280156102e2578160200160208202803683370190505b50865190915060009082826102f681610802565b9350815181106103085761030861083a565b602002602001018181525050856020015160001b82828061032890610802565b93508151811061033a5761033a61083a565b60209081029190910101526060860151828261035581610802565b9350815181106103675761036761083a565b60200260200101818152505060005b84518110156103c9578481815181106103915761039161083a565b016020015160f81c83836103a481610802565b9450815181106103b6576103b661083a565b6020908102919091010152600101610376565b50606087015186516040517fea50d0e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163ea50d0e491610424918690600401610869565b602060405180830381865afa158015610441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610465919061079e565b9450505050505b92915050565b606061046c826020606082600061048a84600261091f565b67ffffffffffffffff8111156104a2576104a261061b565b6040519080825280601f01601f1916602001820160405280156104cc576020820181803683370190505b50905060006104dc85600261091f565b6104e79060016107ef565b90505b600181111561058e577f303132333435363738396162636465660000000000000000000000000000000083600f16601081106105285761052861083a565b1a60f81b82610538600284610936565b815181106105485761054861083a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049290921c9161058781610949565b90506104ea565b5081156105d1576040517fe22e27eb0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604401610177565b949350505050565b6000602082840312156105eb57600080fd5b813567ffffffffffffffff81111561060257600080fd5b82016080818503121561061457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561066d5761066d61061b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156106ba576106ba61061b565b604052919050565b6000608082360312156106d457600080fd5b6106dc61064a565b823567ffffffffffffffff8111156106f357600080fd5b830136601f82011261070457600080fd5b803567ffffffffffffffff81111561071e5761071e61061b565b61074f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610673565b81815236602083850101111561076457600080fd5b8160208401602083013760006020928201830152835284810135908301525060408084013590820152606092830135928101929092525090565b6000602082840312156107b057600080fd5b8151801515811461061457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561046c5761046c6107c0565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610833576108336107c0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604081526000835180604084015260005b81811015610897576020818701810151606086840101520161087a565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f82011683019050606081016060848303016020850152808551808352608084019150602087019350600092505b8083101561091457835182526020820191506020840193506001830192506108f1565b509695505050505050565b808202811582820484141761046c5761046c6107c0565b8181038181111561046c5761046c6107c0565b600081610958576109586107c0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122073b0a36f1dda3e9ffc37bf93ab5d8b5efd958852cabaf62bd1243bf3074445d364736f6c634300081b0033";

type TestJwtAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJwtAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestJwtAccount__factory extends ContractFactory {
  constructor(...args: TestJwtAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    accountData_: ZkLogin.AccountDataStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(accountData_, overrides || {});
  }
  override deploy(
    accountData_: ZkLogin.AccountDataStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(accountData_, overrides || {}) as Promise<
      TestJwtAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestJwtAccount__factory {
    return super.connect(runner) as TestJwtAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJwtAccountInterface {
    return new Interface(_abi) as TestJwtAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestJwtAccount {
    return new Contract(address, _abi, runner) as unknown as TestJwtAccount;
  }
}
