/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PublicKeyRegistry {
  export type PublicKeyValidityStruct = {
    providerId: BytesLike;
    publicKeyHash: BytesLike;
    valid: boolean;
  };

  export type PublicKeyValidityStructOutput = [
    providerId: string,
    publicKeyHash: string,
    valid: boolean
  ] & { providerId: string; publicKeyHash: string; valid: boolean };
}

export interface PublicKeyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkPublicKey"
      | "isPublicKeyHashValid"
      | "owner"
      | "renounceOwnership"
      | "setPublicKeyValid"
      | "setPublicKeysValid"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkPublicKey",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicKeyHashValid",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicKeyValid",
    values: [BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicKeysValid",
    values: [PublicKeyRegistry.PublicKeyValidityStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicKeyHashValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicKeyValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicKeysValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublicKeyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PublicKeyRegistry;
  waitForDeployment(): Promise<this>;

  interface: PublicKeyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkPublicKey: TypedContractMethod<
    [providerId: BytesLike, publicKeyHash: BytesLike],
    [boolean],
    "view"
  >;

  isPublicKeyHashValid: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPublicKeyValid: TypedContractMethod<
    [providerId: BytesLike, publicKeyHash: BytesLike, valid: boolean],
    [void],
    "nonpayable"
  >;

  setPublicKeysValid: TypedContractMethod<
    [validity: PublicKeyRegistry.PublicKeyValidityStruct[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkPublicKey"
  ): TypedContractMethod<
    [providerId: BytesLike, publicKeyHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPublicKeyHashValid"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicKeyValid"
  ): TypedContractMethod<
    [providerId: BytesLike, publicKeyHash: BytesLike, valid: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPublicKeysValid"
  ): TypedContractMethod<
    [validity: PublicKeyRegistry.PublicKeyValidityStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
