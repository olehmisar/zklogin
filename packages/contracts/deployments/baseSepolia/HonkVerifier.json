{
  "address": "0x99E1E8F8122eAdc0a2fC1B9dFa147237Bd543cD3",
  "abi": [
    {
      "inputs": [],
      "name": "PublicInputsLengthWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShpleminiFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SumcheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf80294fb4216d9f9ec818fb05dc51f048bb9c743351b41318f04be4e5e943c9",
  "receipt": {
    "to": null,
    "from": "0xEE0A4782efd390120A29F050A76B297D078e1df9",
    "contractAddress": "0x99E1E8F8122eAdc0a2fC1B9dFa147237Bd543cD3",
    "transactionIndex": 3,
    "gasUsed": "5348766",
    "logsBloom": "0x
    "blockHash": "0x037a64af2cb2ad789c0c429c8157cba008c6d2e6c7a2ddb581c49192d30b744f",
    "transactionHash": "0xaf80294fb4216d9f9ec818fb05dc51f048bb9c743351b41318f04be4e5e943c9",
    "logs": [],
    "blockNumber": 18975454,
    "cumulativeGasUsed": "5444185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d3d7e5538e592539a63aff937e00165",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PublicInputsLengthWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShpleminiFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SumcheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"publicInputs\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"noir/target/jwt_account_honk.sol\":\"HonkVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"noir/target/jwt_account_honk.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022 Aztec\\npragma solidity >=0.8.21;\\n\\nuint256 constant N = 262144;\\nuint256 constant LOG_N = 18;\\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 67;\\nlibrary HonkVerificationKey {\\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\\n            circuitSize: uint256(262144),\\n            logCircuitSize: uint256(18),\\n            publicInputsSize: uint256(67),\\n            ql: Honk.G1Point({ \\n               x: uint256(0x128f4689193e8d7e352ac5f0afe29ff277d1b8b08807981784a590b82a9b5e2e),\\n               y: uint256(0x1aa8be7d44f5bf4c12440bd390aeb102e211af54f0c176e5a7aaecdf49543574)\\n            }),\\n            qr: Honk.G1Point({ \\n               x: uint256(0x2b0a33558c2603b6bc43635665be9da0f5e2f623bea9e22dd055c74324d7f122),\\n               y: uint256(0x162d39578897a70f2dc851710de29d3dd6fae4e768f2c841aa7b95834ceae5cb)\\n            }),\\n            qo: Honk.G1Point({ \\n               x: uint256(0x262d979b29df1669541daa3f02157701ff7ab07a6f5317d2e4d1c4c2106e17e3),\\n               y: uint256(0x06af46ef2dc4282de259c7e02867c3c77a799af864e2370f61a8f1aec7a7f409)\\n            }),\\n            q4: Honk.G1Point({ \\n               x: uint256(0x0e45f7edf0975574a0234a5c0510af9251c52534b527f8af7bd17a4c60959096),\\n               y: uint256(0x2053c39f8961e378924eb488270ae9caab9db0bbf2d2937c0fef89a40000d214)\\n            }),\\n            qm: Honk.G1Point({ \\n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000000),\\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000000)\\n            }),\\n            qc: Honk.G1Point({ \\n               x: uint256(0x0023296072ba882e23ed90ee1dac8eedbb30e5b4fbbf6a8be14cc97eaa446693),\\n               y: uint256(0x1540513d0b8971ae7c56b28838a830801b04cc4f3a3dde06c3eac3410a2ee9c4)\\n            }),\\n            qArith: Honk.G1Point({ \\n               x: uint256(0x24792fa51f5beafb9c4eff1a8bf1a9a6ccd9a02877d64ec78becc03bc9f7d1ff),\\n               y: uint256(0x2b3a9b5ddd9cf49b41974c5cb73e39997fd915a8df5b8458fa08d02a55a96443)\\n            }),\\n            qDeltaRange: Honk.G1Point({ \\n               x: uint256(0x1df1862c3cd967cf4e80a289e6fec969049ae11aac5a796ac650315d22e580fb),\\n               y: uint256(0x2afb83456939046324306525332ef3307638d6766ff90e40559aa45e471b871b)\\n            }),\\n            qElliptic: Honk.G1Point({ \\n               x: uint256(0x286ee766413caa93518a7570875801a9159d2e1315c1ab5bc9e52595a830c495),\\n               y: uint256(0x045175bd839a41eda5e9b6a40f76bbbf2723a68e1e7ecd739bd97ae093cd6528)\\n            }),\\n            qAux: Honk.G1Point({ \\n               x: uint256(0x1c2f84adf95896cf0018ae79ebbdeb2468b1404953a855ec2facc4b494495433),\\n               y: uint256(0x0a175b5ba1452877e6cb7ac6ca850788f7e17a56f310cb5f18d9642b7bdcbcf2)\\n            }),\\n            qLookup: Honk.G1Point({ \\n               x: uint256(0x22ffd03e53836f0a9271398e34a792953979926b49a76c967c71cc8af35e04bb),\\n               y: uint256(0x02e2ae071779429f971820e5d680764ae55b0a0db4bc14709d47abc261cfe64c)\\n            }),\\n            qPoseidon2External: Honk.G1Point({ \\n               x: uint256(0x034ab86a5bccfa4f69637da232ba777f403c1aeb69ad6040d432a795e1b382c2),\\n               y: uint256(0x09a353e2a34ad0af28688dbf4c01cc7de2c9878d6a1b80ce58e567d6c48b5bec)\\n            }),\\n            qPoseidon2Internal: Honk.G1Point({ \\n               x: uint256(0x1a65519a1ab82173d9cb9dc061f62c9d53ef95915b0cc76feb9feb90351e810d),\\n               y: uint256(0x29c0afd9c7eeae8e1635b3835090d59d5344bd56cf3c71487adcf6d8c5844348)\\n            }),\\n            s1: Honk.G1Point({ \\n               x: uint256(0x139c2f5bba86aea351df6608e3f1cd26b3c0b4371dca357e701a6025f94be1e7),\\n               y: uint256(0x22399eb57ad19a4409a194335726da4d76a0cf2d0d89a50dbc7f687de1aad8c3)\\n            }),\\n            s2: Honk.G1Point({ \\n               x: uint256(0x0ff16a5ae01ecffc7815eb75c174ad14281aa49059929907518634d841c628f5),\\n               y: uint256(0x2d867f1d311969273bc82b184e63d9269b182a881d3b302b242a4dc93462f7b7)\\n            }),\\n            s3: Honk.G1Point({ \\n               x: uint256(0x0821760c77fc15784afcaff815f73f8f90aa38ebe34d3b48695e3a6ad08ed8b0),\\n               y: uint256(0x2f51bc8941e5c577f7ec1d5bb038bd902c7a5c7dd1389bab38b9c89ec4ab7d29)\\n            }),\\n            s4: Honk.G1Point({ \\n               x: uint256(0x0ffd51787978d66be3b7e70e810c4575178c9f45674db1b870595ce7e2fb5f6f),\\n               y: uint256(0x17a63d56e53061da2fe13b311859cb536d18d6060100c393c5bb9251dfbad74a)\\n            }),\\n            t1: Honk.G1Point({ \\n               x: uint256(0x234c57b9aab8dfb66855cbb2ed5c7dcaa724527a8b5abae05dbfc771da6679cc),\\n               y: uint256(0x22060d556338e2843aed696c8fc98bf0c6d133543b5c8774daf51221e0eafb44)\\n            }),\\n            t2: Honk.G1Point({ \\n               x: uint256(0x2c931d2ddd0a37bf249ba13d4c0005dcf10f905b44f587692f7e19c4325beece),\\n               y: uint256(0x02d3dc1f3ed31519bae6c333e090615800a04cfdc9d6233f823114a44746d501)\\n            }),\\n            t3: Honk.G1Point({ \\n               x: uint256(0x06246fd4811f690574ddc55745590439a8f73455e78fdd3521d65c7e007e6b45),\\n               y: uint256(0x1e132a30f5aa1d892595234280dd91b7728b3dadc7b72e58f2a95148f38ba210)\\n            }),\\n            t4: Honk.G1Point({ \\n               x: uint256(0x1e0181f12b41a00b4ee891ed5a942bfdbae834b4faf95ce9e9aaa9bd2500ce63),\\n               y: uint256(0x1b6f032aa6b07625de54649d25628c9a5c45ab7c6c13a88fdd31ca7ecce024af)\\n            }),\\n            id1: Honk.G1Point({ \\n               x: uint256(0x024dcf715a66fd964f629553ae2bcb51c127b813ed7f9a4b28b481fb9e2c3772),\\n               y: uint256(0x20244a5d7222400941070d0355a58d34ab8ff9b0d8935fd8c9225059f13fcaac)\\n            }),\\n            id2: Honk.G1Point({ \\n               x: uint256(0x02987fe7cdb3cab8ebf18ecc8711b792828a0670bd9bcd17442c4a157325c8ef),\\n               y: uint256(0x1c9fa626c623b3102d77b2878a9de76dd9a1837521baa49c6874797a8e5a9626)\\n            }),\\n            id3: Honk.G1Point({ \\n               x: uint256(0x130b070560870337eb165683645e3c8522d6449e1367a35c5cf00dd4462fd967),\\n               y: uint256(0x01fe23c3926178b337c362c53b74d2233d08cf587bb0f114ebfe21542c9645e5)\\n            }),\\n            id4: Honk.G1Point({ \\n               x: uint256(0x153a7f8639e06461474e00018cde1ac1acf38089893c5515de20804922c03219),\\n               y: uint256(0x0939c3d22ab03cefb504fe214af93d65912ae3750ce6b756b0e02c9ce7a16e68)\\n            }),\\n            lagrangeFirst: Honk.G1Point({ \\n               x: uint256(0x19b09aa2fcb34ae480845aa4ad56e01616ae845300e6f676fdb84f4bd396851b),\\n               y: uint256(0x295d8a6bfcce573b23d5eefd0aab6d32479423acd4956ce6deb5a67073f032d5)\\n            }),\\n            lagrangeLast: Honk.G1Point({ \\n               x: uint256(0x08d314a75c6b1f82d70f2edc7b7bf6e7397bc04bc6aaa0584b9e5bbb7689082b),\\n               y: uint256(0x0100000000000000000000000000000000000000000000000000000000000000)\\n            })\\n        });\\n        return vk;\\n    }\\n}\\n\\npragma solidity ^0.8.27;\\n\\ntype Fr is uint256;\\n\\nusing { add as + } for Fr global;\\nusing { sub as - } for Fr global;\\nusing { mul as * } for Fr global;\\nusing { exp as ^ } for Fr global;\\nusing { notEqual as != } for Fr global;\\nusing { equal as == } for Fr global;\\n\\nuint256 constant MODULUS =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\\n\\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\\n\\n// Instantiation\\nlibrary FrLib\\n{\\n    function from(uint256 value) internal pure returns(Fr)\\n    {\\n        return Fr.wrap(value % MODULUS);\\n    }\\n\\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\\n    {\\n        return Fr.wrap(uint256(value) % MODULUS);\\n    }\\n\\n    function toBytes32(Fr value) internal pure returns(bytes32)\\n    {\\n        return bytes32(Fr.unwrap(value));\\n    }\\n\\n    function invert(Fr value) internal view returns(Fr)\\n    {\\n        uint256 v = Fr.unwrap(value);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly\\n        {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), v)\\n            mstore(add(free, 0x80), sub(MODULUS, 2))\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) {\\n                revert(0, 0)\\n            }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function pow(Fr base, uint256 v) internal view returns(Fr)\\n    {\\n        uint256 b = Fr.unwrap(base);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly\\n        {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), b)\\n            mstore(add(free, 0x80), v)\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) {\\n                revert(0, 0)\\n            }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\\n    {\\n        return numerator * invert(denominator);\\n    }\\n\\n    function sqr(Fr value) internal pure returns (Fr) {\\n        return value * value;\\n    }\\n\\n    function unwrap(Fr value) internal pure returns (uint256) {\\n        return Fr.unwrap(value);\\n    }\\n\\n    function neg(Fr value) internal pure returns (Fr) {\\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\\n    }\\n}\\n\\n// Free functions\\nfunction add(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction mul(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction sub(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\\n{\\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\\n\\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\\n        base = base * base;\\n    }\\n    return base;\\n}\\n\\nfunction notEqual(Fr a, Fr b) pure returns(bool)\\n{\\n    return Fr.unwrap(a) != Fr.unwrap(b);\\n}\\n\\nfunction equal(Fr a, Fr b) pure returns(bool)\\n{\\n    return Fr.unwrap(a) == Fr.unwrap(b);\\n}\\n\\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\\n\\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\\nuint256 constant NUMBER_OF_ENTITIES = 44;\\nuint256 constant NUMBER_UNSHIFTED = 35;\\nuint256 constant NUMBER_TO_BE_SHIFTED = 9;\\n\\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\\nuint256 constant NUMBER_OF_ALPHAS = 25;\\n\\n// Prime field order\\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\\n\\n// ENUM FOR WIRES\\nenum WIRE {\\n    Q_M,\\n    Q_C,\\n    Q_L,\\n    Q_R,\\n    Q_O,\\n    Q_4,\\n    Q_ARITH,\\n    Q_RANGE,\\n    Q_ELLIPTIC,\\n    Q_AUX,\\n    Q_LOOKUP,\\n    Q_POSEIDON2_EXTERNAL,\\n    Q_POSEIDON2_INTERNAL,\\n    SIGMA_1,\\n    SIGMA_2,\\n    SIGMA_3,\\n    SIGMA_4,\\n    ID_1,\\n    ID_2,\\n    ID_3,\\n    ID_4,\\n    TABLE_1,\\n    TABLE_2,\\n    TABLE_3,\\n    TABLE_4,\\n    LAGRANGE_FIRST,\\n    LAGRANGE_LAST,\\n    W_L,\\n    W_R,\\n    W_O,\\n    W_4,\\n    Z_PERM,\\n    LOOKUP_INVERSES,\\n    LOOKUP_READ_COUNTS,\\n    LOOKUP_READ_TAGS,\\n    TABLE_1_SHIFT,\\n    TABLE_2_SHIFT,\\n    TABLE_3_SHIFT,\\n    TABLE_4_SHIFT,\\n    W_L_SHIFT,\\n    W_R_SHIFT,\\n    W_O_SHIFT,\\n    W_4_SHIFT,\\n    Z_PERM_SHIFT\\n}\\n\\nlibrary Honk {\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct G1ProofPoint {\\n        uint256 x_0;\\n        uint256 x_1;\\n        uint256 y_0;\\n        uint256 y_1;\\n    }\\n\\n    struct VerificationKey {\\n        // Misc Params\\n        uint256 circuitSize;\\n        uint256 logCircuitSize;\\n        uint256 publicInputsSize;\\n        // Selectors\\n        G1Point qm;\\n        G1Point qc;\\n        G1Point ql;\\n        G1Point qr;\\n        G1Point qo;\\n        G1Point q4;\\n        G1Point qArith; // Arithmetic widget\\n        G1Point qDeltaRange; // Delta Range sort\\n        G1Point qAux; // Auxillary\\n        G1Point qElliptic; // Auxillary\\n        G1Point qLookup; // Lookup\\n        G1Point qPoseidon2External;\\n        G1Point qPoseidon2Internal;\\n        // Copy cnstraints\\n        G1Point s1;\\n        G1Point s2;\\n        G1Point s3;\\n        G1Point s4;\\n        // Copy identity\\n        G1Point id1;\\n        G1Point id2;\\n        G1Point id3;\\n        G1Point id4;\\n        // Precomputed lookup table\\n        G1Point t1;\\n        G1Point t2;\\n        G1Point t3;\\n        G1Point t4;\\n        // Fixed first and last\\n        G1Point lagrangeFirst;\\n        G1Point lagrangeLast;\\n    }\\n\\n    struct Proof {\\n        uint256 circuitSize;\\n        uint256 publicInputsSize;\\n        uint256 publicInputsOffset;\\n        // Free wires\\n        Honk.G1ProofPoint w1;\\n        Honk.G1ProofPoint w2;\\n        Honk.G1ProofPoint w3;\\n        Honk.G1ProofPoint w4;\\n        // Lookup helpers - Permutations\\n        Honk.G1ProofPoint zPerm;\\n        // Lookup helpers - logup\\n        Honk.G1ProofPoint lookupReadCounts;\\n        Honk.G1ProofPoint lookupReadTags;\\n        Honk.G1ProofPoint lookupInverses;\\n        // Sumcheck\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\\n        // Shplemini\\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\\n        Honk.G1ProofPoint shplonkQ;\\n        Honk.G1ProofPoint kzgQuotient;\\n    }\\n}\\n\\n\\n// Transcript library to generate fiat shamir challenges\\nstruct Transcript {\\n    Fr eta;\\n    Fr etaTwo;\\n    Fr etaThree;\\n    Fr beta;\\n    Fr gamma;\\n    Fr[NUMBER_OF_ALPHAS] alphas;\\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\\n    // Shplemini\\n    Fr rho;\\n    Fr geminiR;\\n    Fr shplonkNu;\\n    Fr shplonkZ;\\n    // Derived\\n    Fr publicInputsDelta;\\n}\\n\\nlibrary TranscriptLib {\\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 publicInputsSize)\\n        internal\\n        pure\\n        returns (Transcript memory t)\\n    {\\n        Fr previousChallenge;\\n        (t.eta, t.etaTwo, t.etaThree, previousChallenge) = generateEtaChallenge(proof, publicInputs, publicInputsSize);\\n\\n        (t.beta, t.gamma, previousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\\n\\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\\n\\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\\n\\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\\n\\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\\n\\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\\n\\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\\n\\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\\n\\n        return t;\\n    }\\n\\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        uint256 hi = challengeU256 >> 128;\\n        first = FrLib.fromBytes32(bytes32(lo));\\n        second = FrLib.fromBytes32(bytes32(hi));\\n    }\\n\\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 publicInputsSize)\\n        internal\\n        pure\\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\\n    {\\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\\n        round0[0] = bytes32(proof.circuitSize);\\n        round0[1] = bytes32(proof.publicInputsSize);\\n        round0[2] = bytes32(proof.publicInputsOffset);\\n        for (uint256 i = 0; i < publicInputsSize; i++) {\\n            round0[3 + i] = bytes32(publicInputs[i]);\\n        }\\n\\n        // Create the first challenge\\n        // Note: w4 is added to the challenge later on\\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\\n\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\\n        (eta, etaTwo) = splitChallenge(previousChallenge);\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n        Fr unused;\\n        (etaThree, unused) = splitChallenge(previousChallenge);\\n    }\\n\\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\\n    {\\n        bytes32[13] memory round1;\\n        round1[0] = FrLib.toBytes32(previousChallenge);\\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\\n        round1[9] = bytes32(proof.w4.x_0);\\n        round1[10] = bytes32(proof.w4.x_1);\\n        round1[11] = bytes32(proof.w4.y_0);\\n        round1[12] = bytes32(proof.w4.y_1);\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    // Alpha challenges non-linearise the gate contributions\\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\\n    {\\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\\n        uint256[9] memory alpha0;\\n        alpha0[0] = Fr.unwrap(previousChallenge);\\n        alpha0[1] = proof.lookupInverses.x_0;\\n        alpha0[2] = proof.lookupInverses.x_1;\\n        alpha0[3] = proof.lookupInverses.y_0;\\n        alpha0[4] = proof.lookupInverses.y_1;\\n        alpha0[5] = proof.zPerm.x_0;\\n        alpha0[6] = proof.zPerm.x_1;\\n        alpha0[7] = proof.zPerm.y_0;\\n        alpha0[8] = proof.zPerm.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\\n\\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\\n        }\\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            Fr unused;\\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\\n        }\\n    }\\n\\n    function generateGateChallenges(Fr previousChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n            Fr unused;\\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\\n        }\\n        nextPreviousChallenge = previousChallenge;\\n    }\\n\\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\\n            univariateChal[0] = prevChallenge;\\n\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\\n            }\\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\\n            Fr unused;\\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\\n        }\\n        nextPreviousChallenge = prevChallenge;\\n    }\\n\\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr rho, Fr nextPreviousChallenge)\\n    {\\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\\n        rhoChallengeElements[0] = prevChallenge;\\n\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\\n        Fr unused;\\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr geminiR, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\\n        gR[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\\n        Fr unused;\\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\\n        Fr unused;\\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\\n    {\\n        uint256[5] memory shplonkZChallengeElements;\\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\\n        Fr unused;\\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory) {\\n        Honk.Proof memory p;\\n\\n        // Metadata\\n        p.circuitSize = uint256(bytes32(proof[0x00:0x20]));\\n        p.publicInputsSize = uint256(bytes32(proof[0x20:0x40]));\\n        p.publicInputsOffset = uint256(bytes32(proof[0x40:0x60]));\\n\\n        // Commitments\\n        p.w1 = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x60:0x80])),\\n            x_1: uint256(bytes32(proof[0x80:0xa0])),\\n            y_0: uint256(bytes32(proof[0xa0:0xc0])),\\n            y_1: uint256(bytes32(proof[0xc0:0xe0]))\\n        });\\n\\n        p.w2 = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0xe0:0x100])),\\n            x_1: uint256(bytes32(proof[0x100:0x120])),\\n            y_0: uint256(bytes32(proof[0x120:0x140])),\\n            y_1: uint256(bytes32(proof[0x140:0x160]))\\n        });\\n        p.w3 = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x160:0x180])),\\n            x_1: uint256(bytes32(proof[0x180:0x1a0])),\\n            y_0: uint256(bytes32(proof[0x1a0:0x1c0])),\\n            y_1: uint256(bytes32(proof[0x1c0:0x1e0]))\\n        });\\n\\n        // Lookup / Permutation Helper Commitments\\n        p.lookupReadCounts = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x1e0:0x200])),\\n            x_1: uint256(bytes32(proof[0x200:0x220])),\\n            y_0: uint256(bytes32(proof[0x220:0x240])),\\n            y_1: uint256(bytes32(proof[0x240:0x260]))\\n        });\\n        p.lookupReadTags = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x260:0x280])),\\n            x_1: uint256(bytes32(proof[0x280:0x2a0])),\\n            y_0: uint256(bytes32(proof[0x2a0:0x2c0])),\\n            y_1: uint256(bytes32(proof[0x2c0:0x2e0]))\\n        });\\n        p.w4 = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x2e0:0x300])),\\n            x_1: uint256(bytes32(proof[0x300:0x320])),\\n            y_0: uint256(bytes32(proof[0x320:0x340])),\\n            y_1: uint256(bytes32(proof[0x340:0x360]))\\n        });\\n        p.lookupInverses = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x360:0x380])),\\n            x_1: uint256(bytes32(proof[0x380:0x3a0])),\\n            y_0: uint256(bytes32(proof[0x3a0:0x3c0])),\\n            y_1: uint256(bytes32(proof[0x3c0:0x3e0]))\\n        });\\n        p.zPerm = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[0x3e0:0x400])),\\n            x_1: uint256(bytes32(proof[0x400:0x420])),\\n            y_0: uint256(bytes32(proof[0x420:0x440])),\\n            y_1: uint256(bytes32(proof[0x440:0x460]))\\n        });\\n\\n        // Boundary represents a pointer to the head of the unread part of the proof\\n        uint256 boundary = 0x460;\\n\\n        // Sumcheck univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            // The loop boundary of i, this will shift forward on each evaluation\\n            uint256 loop_boundary = boundary + (i * 0x20 * BATCHED_RELATION_PARTIAL_LENGTH);\\n\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                uint256 start = loop_boundary + (j * 0x20);\\n                uint256 end = start + 0x20;\\n                p.sumcheckUnivariates[i][j] = FrLib.fromBytes32(bytes32(proof[start:end]));\\n            }\\n        }\\n\\n        boundary = boundary + (CONST_PROOF_SIZE_LOG_N * BATCHED_RELATION_PARTIAL_LENGTH * 0x20);\\n        // Sumcheck evaluations\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            uint256 start = boundary + (i * 0x20);\\n            uint256 end = start + 0x20;\\n            p.sumcheckEvaluations[i] = FrLib.fromBytes32(bytes32(proof[start:end]));\\n        }\\n\\n        boundary = boundary + (NUMBER_OF_ENTITIES * 0x20);\\n\\n        // Gemini\\n        // Read gemini fold univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            uint256 xStart = boundary + (i * 0x80);\\n            uint256 xEnd = xStart + 0x20;\\n\\n            uint256 x1Start = xEnd;\\n            uint256 x1End = x1Start + 0x20;\\n\\n            uint256 yStart = x1End;\\n            uint256 yEnd = yStart + 0x20;\\n\\n            uint256 y1Start = yEnd;\\n            uint256 y1End = y1Start + 0x20;\\n            p.geminiFoldComms[i] = Honk.G1ProofPoint({\\n                x_0: uint256(bytes32(proof[xStart:xEnd])),\\n                x_1: uint256(bytes32(proof[x1Start:x1End])),\\n                y_0: uint256(bytes32(proof[yStart:yEnd])),\\n                y_1: uint256(bytes32(proof[y1Start:y1End]))\\n            });\\n        }\\n\\n        boundary = boundary + ((CONST_PROOF_SIZE_LOG_N - 1) * 0x80);\\n\\n        // Read gemini a evaluations\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            uint256 start = boundary + (i * 0x20);\\n            uint256 end = start + 0x20;\\n            p.geminiAEvaluations[i] = FrLib.fromBytes32(bytes32(proof[start:end]));\\n        }\\n\\n        boundary = boundary + (CONST_PROOF_SIZE_LOG_N * 0x20);\\n\\n        // Shplonk\\n        p.shplonkQ = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[boundary:boundary + 0x20])),\\n            x_1: uint256(bytes32(proof[boundary + 0x20:boundary + 0x40])),\\n            y_0: uint256(bytes32(proof[boundary + 0x40:boundary + 0x60])),\\n            y_1: uint256(bytes32(proof[boundary + 0x60:boundary + 0x80]))\\n        });\\n\\n        boundary = boundary + 0x80;\\n\\n        // KZG\\n        p.kzgQuotient = Honk.G1ProofPoint({\\n            x_0: uint256(bytes32(proof[boundary:boundary + 0x20])),\\n            x_1: uint256(bytes32(proof[boundary + 0x20:boundary + 0x40])),\\n            y_0: uint256(bytes32(proof[boundary + 0x40:boundary + 0x60])),\\n            y_1: uint256(bytes32(proof[boundary + 0x60:boundary + 0x80]))\\n        });\\n\\n        return p;\\n    }\\n}\\n\\n// EC Point utilities\\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\\n}\\n\\nfunction ecMul(Honk.G1Point memory point, Fr scalar) view returns (Honk.G1Point memory) {\\n    bytes memory input = abi.encodePacked(point.x, point.y, Fr.unwrap(scalar));\\n    (bool success, bytes memory result) = address(0x07).staticcall(input);\\n    require(success, \\\"ecMul failed\\\");\\n\\n    (uint256 x, uint256 y) = abi.decode(result, (uint256, uint256));\\n    return Honk.G1Point({x: x, y: y});\\n}\\n\\nfunction ecAdd(Honk.G1Point memory point0, Honk.G1Point memory point1) view returns (Honk.G1Point memory) {\\n    bytes memory input = abi.encodePacked(point0.x, point0.y, point1.x, point1.y);\\n    (bool success, bytes memory result) = address(0x06).staticcall(input);\\n    require(success, \\\"ecAdd failed\\\");\\n\\n    (uint256 x, uint256 y) = abi.decode(result, (uint256, uint256));\\n    return Honk.G1Point({x: x, y: y});\\n}\\n\\nfunction ecSub(Honk.G1Point memory point0, Honk.G1Point memory point1) view returns (Honk.G1Point memory) {\\n    // We negate the second point\\n    uint256 negativePoint1Y = (Q - point1.y) % Q;\\n    bytes memory input = abi.encodePacked(point0.x, point0.y, point1.x, negativePoint1Y);\\n    (bool success, bytes memory result) = address(0x06).staticcall(input);\\n    require(success, \\\"ecAdd failed\\\");\\n\\n    (uint256 x, uint256 y) = abi.decode(result, (uint256, uint256));\\n    return Honk.G1Point({x: x, y: y});\\n}\\n\\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\\n    point.y = (Q - point.y) % Q;\\n    return point;\\n}\\n\\n\\nlibrary RelationsLib {\\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\\n\\n    function accumulateRelationEvaluations(Honk.Proof memory proof, Transcript memory tp, Fr powPartialEval)\\n        internal\\n        pure\\n        returns (Fr accumulator)\\n    {\\n        Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations = proof.sumcheckEvaluations;\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\\n\\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePermutationRelation(purportedEvaluations, tp, evaluations, powPartialEval);\\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, tp, evaluations, powPartialEval);\\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateAuxillaryRelation(purportedEvaluations, tp, evaluations, powPartialEval);\\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\\n        accumulator = scaleAndBatchSubrelations(evaluations, tp.alphas);\\n    }\\n\\n    /**\\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\\n     * editors, and thus is noisy.\\n     */\\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\\n        return p[uint256(_wire)];\\n    }\\n\\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\\n    /**\\n     * Ultra Arithmetic Relation\\n     *\\n     */\\n    function accumulateArithmeticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        // Relation 0\\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\\n        {\\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\\n\\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[0] = accum;\\n        }\\n\\n        // Relation 1\\n        {\\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\\n            accum = accum * (q_arith - Fr.wrap(2));\\n            accum = accum * (q_arith - Fr.wrap(1));\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[1] = accum;\\n        }\\n    }\\n\\n    function accumulatePermutationRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Transcript memory tp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr grand_product_numerator;\\n        Fr grand_product_denominator;\\n\\n        {\\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * tp.beta + tp.gamma;\\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * tp.beta + tp.gamma);\\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * tp.beta + tp.gamma);\\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * tp.beta + tp.gamma);\\n\\n            grand_product_numerator = num;\\n        }\\n        {\\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * tp.beta + tp.gamma;\\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * tp.beta + tp.gamma);\\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * tp.beta + tp.gamma);\\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * tp.beta + tp.gamma);\\n\\n            grand_product_denominator = den;\\n        }\\n\\n        // Contribution 2\\n        {\\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\\n\\n            acc = acc\\n                - (\\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * tp.publicInputsDelta))\\n                        * grand_product_denominator\\n                );\\n            acc = acc * domainSep;\\n            evals[2] = acc;\\n        }\\n\\n        // Contribution 3\\n        {\\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\\n            evals[3] = acc;\\n        }\\n    }\\n\\n    function accumulateLogDerivativeLookupRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Transcript memory tp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr write_term;\\n        Fr read_term;\\n\\n        // Calculate the write term (the table accumulation)\\n        {\\n            write_term = wire(p, WIRE.TABLE_1) + tp.gamma + (wire(p, WIRE.TABLE_2) * tp.eta)\\n                + (wire(p, WIRE.TABLE_3) * tp.etaTwo) + (wire(p, WIRE.TABLE_4) * tp.etaThree);\\n        }\\n\\n        // Calculate the write term\\n        {\\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + tp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\\n\\n            read_term = derived_entry_1 + (derived_entry_2 * tp.eta) + (derived_entry_3 * tp.etaTwo)\\n                + (wire(p, WIRE.Q_O) * tp.etaThree);\\n        }\\n\\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\\n\\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\\n\\n        // Inverse calculated correctly relation\\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\\n        accumulatorNone = accumulatorNone * domainSep;\\n\\n        // Inverse\\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\\n\\n        evals[4] = accumulatorNone;\\n        evals[5] = accumulatorOne;\\n    }\\n\\n    function accumulateDeltaRangeRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\\n\\n        // Compute wire differences\\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\\n\\n        // Contribution 6\\n        {\\n            Fr acc = delta_1;\\n            acc = acc * (delta_1 + minus_one);\\n            acc = acc * (delta_1 + minus_two);\\n            acc = acc * (delta_1 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[6] = acc;\\n        }\\n\\n        // Contribution 7\\n        {\\n            Fr acc = delta_2;\\n            acc = acc * (delta_2 + minus_one);\\n            acc = acc * (delta_2 + minus_two);\\n            acc = acc * (delta_2 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[7] = acc;\\n        }\\n\\n        // Contribution 8\\n        {\\n            Fr acc = delta_3;\\n            acc = acc * (delta_3 + minus_one);\\n            acc = acc * (delta_3 + minus_two);\\n            acc = acc * (delta_3 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[8] = acc;\\n        }\\n\\n        // Contribution 9\\n        {\\n            Fr acc = delta_4;\\n            acc = acc * (delta_4 + minus_one);\\n            acc = acc * (delta_4 + minus_two);\\n            acc = acc * (delta_4 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[9] = acc;\\n        }\\n    }\\n\\n    struct EllipticParams {\\n        // Points\\n        Fr x_1;\\n        Fr y_1;\\n        Fr x_2;\\n        Fr y_2;\\n        Fr y_3;\\n        Fr x_3;\\n        // push accumulators into memory\\n        Fr x_double_identity;\\n    }\\n\\n    function accumulateEllipticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        EllipticParams memory ep;\\n        ep.x_1 = wire(p, WIRE.W_R);\\n        ep.y_1 = wire(p, WIRE.W_O);\\n\\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\\n\\n        Fr q_sign = wire(p, WIRE.Q_L);\\n        Fr q_is_double = wire(p, WIRE.Q_M);\\n\\n        // Contribution 10 point addition, x-coordinate check\\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\\n        Fr x_diff = (ep.x_2 - ep.x_1);\\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\\n        {\\n            // Move to top\\n            Fr partialEval = domainSep;\\n\\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\\n            x_add_identity = x_add_identity * x_diff * x_diff;\\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\\n\\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 11 point addition, x-coordinate check\\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\\n        {\\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 10 point doubling, x-coordinate check\\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\\n        {\\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\\n\\n            // NOTE: pushed into memory (stack >:'( )\\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\\n\\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n            evals[10] = evals[10] + acc;\\n        }\\n\\n        // Contribution 11 point doubling, y-coordinate check\\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\\n        {\\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n        }\\n    }\\n\\n    // Constants for the auxiliary relation\\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\\n\\n    // Parameters used within the Auxiliary Relation\\n    // A struct is used to work around stack too deep. This relation has alot of variables\\n    struct AuxParams {\\n        Fr limb_subproduct;\\n        Fr non_native_field_gate_1;\\n        Fr non_native_field_gate_2;\\n        Fr non_native_field_gate_3;\\n        Fr limb_accumulator_1;\\n        Fr limb_accumulator_2;\\n        Fr memory_record_check;\\n        Fr partial_record_check;\\n        Fr next_gate_access_type;\\n        Fr record_delta;\\n        Fr index_delta;\\n        Fr adjacent_values_match_if_adjacent_indices_match;\\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\\n        Fr access_check;\\n        Fr next_gate_access_type_is_boolean;\\n        Fr ROM_consistency_check_identity;\\n        Fr RAM_consistency_check_identity;\\n        Fr timestamp_delta;\\n        Fr RAM_timestamp_check_identity;\\n        Fr memory_identity;\\n        Fr index_is_monotonically_increasing;\\n        Fr auxiliary_identity;\\n    }\\n\\n    function accumulateAuxillaryRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Transcript memory tp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        AuxParams memory ap;\\n\\n        /**\\n         * Contribution 12\\n         * Non native field arithmetic gate 2\\n         * deg 4\\n         *\\n         *             _                                                                               _\\n         *            /   _                   _                               _       14                \\\\\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\\n         *            \\\\_                                                                               _/\\n         *\\n         *\\n         */\\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\\n        ap.non_native_field_gate_2 =\\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\\n\\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\\n\\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\\n\\n        Fr non_native_field_identity =\\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\\n\\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\\n        // deg 2\\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\\n\\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\\n        // deg 2\\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\\n\\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\\n\\n        /**\\n         * MEMORY\\n         *\\n         * A RAM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\\n         *  * v: `value` of memory cell being accessed\\n         *  * a: `access` type of record. read: 0 = read, 1 = write\\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\\n         *\\n         * A ROM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\\n         *\\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\\n         *\\n         *  | gate type | i  | v2/t  |  v | a  | r  |\\n         *  | --------- | -- | ----- | -- | -- | -- |\\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\\n         *\\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\\n         * `w2` to fix its value)\\n         *\\n         *\\n         */\\n\\n        /**\\n         * Memory Record Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * A ROM/ROM access gate can be evaluated with the identity:\\n         *\\n         * qc + w1 \\\\eta + w2 \\\\eta_two + w3 \\\\eta_three - w4 = 0\\n         *\\n         * For ROM gates, qc = 0\\n         */\\n        ap.memory_record_check = wire(p, WIRE.W_O) * tp.etaThree;\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * tp.etaTwo);\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * tp.eta);\\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\\n\\n        /**\\n         * Contribution 13 & 14\\n         * ROM Consistency Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\\n         * records that are sorted.\\n         *\\n         * We apply the following checks for the sorted records:\\n         *\\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\\n         * 2. index values for adjacent records are monotonically increasing\\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\\n         *\\n         */\\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\\n\\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\\n\\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\\n\\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n\\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\\n\\n        /**\\n         * Contributions 15,16,17\\n         * RAM Consistency Check\\n         *\\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\\n         * This is validated by requiring `access` to be boolean\\n         *\\n         * For two adjacent entries in the sorted list if _both_\\n         *  A) index values match\\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\\n         * then\\n         *  C) both values must match.\\n         * The gate boolean check is\\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\\n         *\\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\\n         * with a WRITE operation.\\n         */\\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\\n\\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * tp.etaThree;\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * tp.etaTwo);\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * tp.eta);\\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\\n\\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\\n\\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\\n        // type is  correct, to cover this edge case\\n        // deg 2 or 4\\n        ap.next_gate_access_type_is_boolean =\\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\\n\\n        // Putting it all together...\\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\\n\\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\\n\\n        /**\\n         * RAM Timestamp Consistency Check\\n         *\\n         * | w1 | w2 | w3 | w4 |\\n         * | index | timestamp | timestamp_check | -- |\\n         *\\n         * Let delta_index = index_{i + 1} - index_{i}\\n         *\\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\\n         * Else timestamp_check = 0\\n         */\\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\\n        ap.RAM_timestamp_check_identity =\\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\\n\\n        /**\\n         * Complete Contribution 12\\n         * The complete RAM/ROM memory identity\\n         * Partial degree:\\n         */\\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\\n        ap.memory_identity =\\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\\n\\n        // (deg 3 or 9) + (deg 4) + (deg 3)\\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\\n        evals[12] = ap.auxiliary_identity;\\n    }\\n\\n    struct PoseidonExternalParams {\\n        Fr s1;\\n        Fr s2;\\n        Fr s3;\\n        Fr s4;\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr t0;\\n        Fr t1;\\n        Fr t2;\\n        Fr t3;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonExternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonExternalParams memory ep;\\n\\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\\n\\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\\n        // matrix mul v = M_E * u with 14 additions\\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\\n        ep.v4 = ep.t1 + ep.t1;\\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\\n        ep.v2 = ep.t0 + ep.t0;\\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\\n\\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    struct PoseidonInternalParams {\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr u_sum;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr s1;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonInternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonInternalParams memory ip;\\n\\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\\n        ];\\n\\n        // add round constants\\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n\\n        // apply s-box round\\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\\n        ip.u2 = wire(p, WIRE.W_R);\\n        ip.u3 = wire(p, WIRE.W_O);\\n        ip.u4 = wire(p, WIRE.W_4);\\n\\n        // matrix mul with v = M_I * u 4 muls and 7 additions\\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\\n\\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\\n\\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    function scaleAndBatchSubrelations(\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\\n    ) internal pure returns (Fr accumulator) {\\n        accumulator = accumulator + evaluations[0];\\n\\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\\n        }\\n    }\\n}\\n\\n// Errors\\nerror PublicInputsLengthWrong();\\nerror SumcheckFailed();\\nerror ShpleminiFailed();\\n\\ninterface IVerifier {\\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\\n}\\n\\n// Smart contract verifier of honk proofs\\ncontract HonkVerifier is IVerifier\\n{\\n    using FrLib for Fr;\\n\\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\\n        Honk.VerificationKey memory vk = loadVerificationKey();\\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\\n\\n        if (publicInputs.length != vk.publicInputsSize) {\\n            revert PublicInputsLengthWrong();\\n        }\\n\\n        // Generate the fiat shamir challenges for the whole protocol\\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.publicInputsSize);\\n\\n        // Compute the public input delta\\n        t.publicInputsDelta =\\n            computePublicInputDelta(publicInputs, t.beta, t.gamma, vk.circuitSize, p.publicInputsOffset);\\n\\n        // Sumcheck\\n        bool sumcheckVerified = verifySumcheck(p, t);\\n        if (!sumcheckVerified) revert SumcheckFailed();\\n\\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\\n        if (!shpleminiVerified) revert ShpleminiFailed();\\n\\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\\n    }\\n\\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\\n        return HonkVerificationKey.loadVerificationKey();\\n    }\\n\\n    function computePublicInputDelta(\\n        bytes32[] memory publicInputs,\\n        Fr beta,\\n        Fr gamma,\\n        uint256 domainSize,\\n        uint256 offset\\n    ) internal view returns (Fr publicInputDelta) {\\n        Fr numerator = Fr.wrap(1);\\n        Fr denominator = Fr.wrap(1);\\n\\n        Fr numeratorAcc = gamma + (beta * FrLib.from(domainSize + offset));\\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\\n\\n        {\\n            for (uint256 i = 0; i < NUMBER_OF_PUBLIC_INPUTS; i++) {\\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\\n\\n                numerator = numerator * (numeratorAcc + pubInput);\\n                denominator = denominator * (denominatorAcc + pubInput);\\n\\n                numeratorAcc = numeratorAcc + beta;\\n                denominatorAcc = denominatorAcc - beta;\\n            }\\n        }\\n\\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\\n        publicInputDelta = FrLib.div(numerator, denominator);\\n    }\\n\\n    uint256 constant ROUND_TARGET = 0;\\n\\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\\n        Fr roundTarget;\\n        Fr powPartialEvaluation = Fr.wrap(1);\\n\\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\\n        for (uint256 round; round < LOG_N; ++round) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\\n            bool valid = checkSum(roundUnivariate, roundTarget);\\n            if (!valid) revert SumcheckFailed();\\n\\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\\n\\n            // Update the round target for the next rounf\\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\\n            powPartialEvaluation = partiallyEvaluatePOW(tp, powPartialEvaluation, roundChallenge, round);\\n        }\\n\\n        // Last round\\n        Fr grandHonkRelationSum = RelationsLib.accumulateRelationEvaluations(proof, tp, powPartialEvaluation);\\n        verified = (grandHonkRelationSum == roundTarget);\\n    }\\n\\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\\n        internal\\n        pure\\n        returns (bool checked)\\n    {\\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\\n        checked = totalSum == roundTarget;\\n    }\\n\\n    // Return the new target sum for the next sumcheck round\\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\\n        internal\\n        view\\n        returns (Fr targetSum)\\n    {\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\\n        ];\\n\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_DOMAIN = [\\n            Fr.wrap(0x00),\\n            Fr.wrap(0x01),\\n            Fr.wrap(0x02),\\n            Fr.wrap(0x03),\\n            Fr.wrap(0x04),\\n            Fr.wrap(0x05),\\n            Fr.wrap(0x06),\\n            Fr.wrap(0x07)\\n        ];\\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\\n\\n        // Performing Barycentric evaluations\\n        // Compute B(x)\\n        Fr numeratorValue = Fr.wrap(1);\\n        for (uint256 i; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\\n        }\\n\\n        // Calculate domain size N of inverses\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\\n        for (uint256 i; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\\n            inv = inv * (roundChallenge - BARYCENTRIC_DOMAIN[i]);\\n            inv = FrLib.invert(inv);\\n            denominatorInverses[i] = inv;\\n        }\\n\\n        for (uint256 i; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr term = roundUnivariates[i];\\n            term = term * denominatorInverses[i];\\n            targetSum = targetSum + term;\\n        }\\n\\n        // Scale the sum by the value of B(x)\\n        targetSum = targetSum * numeratorValue;\\n    }\\n\\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\\n    function partiallyEvaluatePOW(Transcript memory tp, Fr currentEvaluation, Fr roundChallenge, uint256 round)\\n        internal\\n        pure\\n        returns (Fr newEvaluation)\\n    {\\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (tp.gateChallenges[round] - Fr.wrap(1)));\\n        newEvaluation = currentEvaluation * univariateEval;\\n    }\\n\\n    // Avoid stack too deep\\n    struct ShpleminiIntermediates {\\n        // i-th unshifted commitment is multiplied by \\u2212\\u03c1\\u2071 and the unshifted_scalar ( 1/(z\\u2212r) + \\u03bd/(z+r) )\\n        Fr unshiftedScalar;\\n        // i-th shifted commitment is multiplied by \\u2212\\u03c1\\u2071\\u207a\\u1d4f and the shifted_scalar r\\u207b\\u00b9 \\u22c5 (1/(z\\u2212r) \\u2212 \\u03bd/(z+r))\\n        Fr shiftedScalar;\\n        // Scalar to be multiplied by [1]\\u2081\\n        Fr constantTermAccumulator;\\n        // Accumulator for powers of rho\\n        Fr batchingChallenge;\\n        // Linear combination of multilinear (sumcheck) evaluations and powers of rho\\n        Fr batchedEvaluation;\\n    }\\n\\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\\n        internal\\n        view\\n        returns (bool verified)\\n    {\\n        ShpleminiIntermediates memory mem; // stack\\n\\n        // - Compute vector (r, r\\u00b2, ... , r\\u00b2\\u207d\\u207f\\u207b\\u00b9\\u207e), where n = log_circuit_size, I think this should be CONST_PROOF_SIZE\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = computeSquares(tp.geminiR);\\n\\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\\n\\n        Fr[CONST_PROOF_SIZE_LOG_N + 1] memory inverse_vanishing_evals =\\n            computeInvertedGeminiDenominators(tp, powers_of_evaluation_challenge);\\n\\n        mem.unshiftedScalar = inverse_vanishing_evals[0] + (tp.shplonkNu * inverse_vanishing_evals[1]);\\n        mem.shiftedScalar =\\n            tp.geminiR.invert() * (inverse_vanishing_evals[0] - (tp.shplonkNu * inverse_vanishing_evals[1]));\\n\\n        scalars[0] = Fr.wrap(1);\\n        commitments[0] = convertProofPoint(proof.shplonkQ);\\n\\n        /* Batch multivariate opening claims, shifted and unshifted\\n        * The vector of scalars is populated as follows:\\n        * \\\\f[\\n        * \\\\left(\\n        * - \\\\left(\\\\frac{1}{z-r} + \\\\nu \\\\times \\\\frac{1}{z+r}\\\\right),\\n        * \\\\ldots,\\n        * - \\\\rho^{i+k-1} \\\\times \\\\left(\\\\frac{1}{z-r} + \\\\nu \\\\times \\\\frac{1}{z+r}\\\\right),\\n        * - \\\\rho^{i+k} \\\\times \\\\frac{1}{r} \\\\times \\\\left(\\\\frac{1}{z-r} - \\\\nu \\\\times \\\\frac{1}{z+r}\\\\right),\\n        * \\\\ldots,\\n        * - \\\\rho^{k+m-1} \\\\times \\\\frac{1}{r} \\\\times \\\\left(\\\\frac{1}{z-r} - \\\\nu \\\\times \\\\frac{1}{z+r}\\\\right)\\n        * \\\\right)\\n        * \\\\f]\\n        *\\n        * The following vector is concatenated to the vector of commitments:\\n        * \\\\f[\\n        * f_0, \\\\ldots, f_{m-1}, f_{\\\\text{shift}, 0}, \\\\ldots, f_{\\\\text{shift}, k-1}\\n        * \\\\f]\\n        *\\n        * Simultaneously, the evaluation of the multilinear polynomial\\n        * \\\\f[\\n        * \\\\sum \\\\rho^i \\\\cdot f_i + \\\\sum \\\\rho^{i+k} \\\\cdot f_{\\\\text{shift}, i}\\n        * \\\\f]\\n        * at the challenge point \\\\f$ (u_0,\\\\ldots, u_{n-1}) \\\\f$ is computed.\\n        *\\n        * This approach minimizes the number of iterations over the commitments to multilinear polynomials\\n        * and eliminates the need to store the powers of \\\\f$ \\\\rho \\\\f$.\\n        */\\n        mem.batchingChallenge = Fr.wrap(1);\\n        mem.batchedEvaluation = Fr.wrap(0);\\n\\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n        // g commitments are accumulated at r\\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n\\n        commitments[1] = vk.qm;\\n        commitments[2] = vk.qc;\\n        commitments[3] = vk.ql;\\n        commitments[4] = vk.qr;\\n        commitments[5] = vk.qo;\\n        commitments[6] = vk.q4;\\n        commitments[7] = vk.qArith;\\n        commitments[8] = vk.qDeltaRange;\\n        commitments[9] = vk.qElliptic;\\n        commitments[10] = vk.qAux;\\n        commitments[11] = vk.qLookup;\\n        commitments[12] = vk.qPoseidon2External;\\n        commitments[13] = vk.qPoseidon2Internal;\\n        commitments[14] = vk.s1;\\n        commitments[15] = vk.s2;\\n        commitments[16] = vk.s3;\\n        commitments[17] = vk.s4;\\n        commitments[18] = vk.id1;\\n        commitments[19] = vk.id2;\\n        commitments[20] = vk.id3;\\n        commitments[21] = vk.id4;\\n        commitments[22] = vk.t1;\\n        commitments[23] = vk.t2;\\n        commitments[24] = vk.t3;\\n        commitments[25] = vk.t4;\\n        commitments[26] = vk.lagrangeFirst;\\n        commitments[27] = vk.lagrangeLast;\\n\\n        // Accumulate proof points\\n        commitments[28] = convertProofPoint(proof.w1);\\n        commitments[29] = convertProofPoint(proof.w2);\\n        commitments[30] = convertProofPoint(proof.w3);\\n        commitments[31] = convertProofPoint(proof.w4);\\n        commitments[32] = convertProofPoint(proof.zPerm);\\n        commitments[33] = convertProofPoint(proof.lookupInverses);\\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\\n\\n        // to be Shifted\\n        commitments[36] = vk.t1;\\n        commitments[37] = vk.t2;\\n        commitments[38] = vk.t3;\\n        commitments[39] = vk.t4;\\n        commitments[40] = convertProofPoint(proof.w1);\\n        commitments[41] = convertProofPoint(proof.w2);\\n        commitments[42] = convertProofPoint(proof.w3);\\n        commitments[43] = convertProofPoint(proof.w4);\\n        commitments[44] = convertProofPoint(proof.zPerm);\\n\\n        /* Batch gemini claims from the prover\\n         * place the commitments to gemini a\\u1d62 to the vector of commitments, compute the contributions from\\n         * a\\u1d62(\\u2212r\\u00b2\\u2071) for i=1, \\u2026 , n\\u22121 to the constant term accumulator, add corresponding scalars\\n         *\\n         * 1. Moves the vector\\n         * \\\\f[\\n         * \\\\left( \\\\text{com}(A_1), \\\\text{com}(A_2), \\\\ldots, \\\\text{com}(A_{n-1}) \\\\right)\\n         * \\\\f]\\n        * to the 'commitments' vector.\\n        *\\n        * 2. Computes the scalars:\\n        * \\\\f[\\n        * \\\\frac{\\\\nu^{2}}{z + r^2}, \\\\frac{\\\\nu^3}{z + r^4}, \\\\ldots, \\\\frac{\\\\nu^{n-1}}{z + r^{2^{n-1}}}\\n        * \\\\f]\\n        * and places them into the 'scalars' vector.\\n        *\\n        * 3. Accumulates the summands of the constant term:\\n         * \\\\f[\\n         * \\\\sum_{i=2}^{n-1} \\\\frac{\\\\nu^{i} \\\\cdot A_i(-r^{2^i})}{z + r^{2^i}}\\n         * \\\\f]\\n         * and adds them to the 'constant_term_accumulator'.\\n         */\\n        mem.constantTermAccumulator = Fr.wrap(0);\\n        mem.batchingChallenge = tp.shplonkNu.sqr();\\n\\n        for (uint256 i; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\\n            bool dummy_round = i >= (LOG_N - 1);\\n\\n            Fr scalingFactor = Fr.wrap(0);\\n            if (!dummy_round) {\\n                scalingFactor = mem.batchingChallenge * inverse_vanishing_evals[i + 2];\\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = scalingFactor.neg();\\n            }\\n\\n            mem.constantTermAccumulator =\\n                mem.constantTermAccumulator + (scalingFactor * proof.geminiAEvaluations[i + 1]);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu;\\n\\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\\n        }\\n\\n        // Add contributions from A\\u2080(r) and A\\u2080(-r) to constant_term_accumulator:\\n        // Compute evaluation A\\u2080(r)\\n        Fr a_0_pos = computeGeminiBatchedUnivariateEvaluation(\\n            tp, mem.batchedEvaluation, proof.geminiAEvaluations, powers_of_evaluation_challenge\\n        );\\n\\n        mem.constantTermAccumulator = mem.constantTermAccumulator + (a_0_pos * inverse_vanishing_evals[0]);\\n        mem.constantTermAccumulator =\\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * inverse_vanishing_evals[1]);\\n\\n        // Finalise the batch opening claim\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\\n\\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\\n\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\\n\\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\\n\\n        return pairing(P_0, P_1);\\n    }\\n\\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\\n        squares[0] = r;\\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\\n            squares[i] = squares[i - 1].sqr();\\n        }\\n    }\\n\\n    function computeInvertedGeminiDenominators(\\n        Transcript memory tp,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory eval_challenge_powers\\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N + 1] memory inverse_vanishing_evals) {\\n        Fr eval_challenge = tp.shplonkZ;\\n        inverse_vanishing_evals[0] = (eval_challenge - eval_challenge_powers[0]).invert();\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; ++i) {\\n            Fr round_inverted_denominator = Fr.wrap(0);\\n            if (i <= LOG_N + 1) {\\n                round_inverted_denominator = (eval_challenge + eval_challenge_powers[i]).invert();\\n            }\\n            inverse_vanishing_evals[i + 1] = round_inverted_denominator;\\n        }\\n    }\\n\\n    function computeGeminiBatchedUnivariateEvaluation(\\n        Transcript memory tp,\\n        Fr batchedEvalAccumulator,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers\\n    ) internal view returns (Fr a_0_pos) {\\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\\n            Fr u = tp.sumCheckUChallenges[i - 1];\\n            Fr evalNeg = geminiEvaluations[i - 1];\\n\\n            Fr batchedEvalRoundAcc = (\\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\\n                    - evalNeg * (challengePower * (Fr.wrap(1) - u) - u)\\n            );\\n            // Divide by the denominator\\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\\n\\n            bool is_dummy_round = (i > LOG_N);\\n            if (!is_dummy_round) {\\n                batchedEvalAccumulator = batchedEvalRoundAcc;\\n            }\\n        }\\n\\n        a_0_pos = batchedEvalAccumulator;\\n    }\\n\\n    // This implementation is the same as above with different constants\\n    function batchMul(\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\\n    ) internal view returns (Honk.G1Point memory result) {\\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\\n        assembly {\\n            let success := 0x01\\n            let free := mload(0x40)\\n\\n            // Write the original into the accumulator\\n            // Load into memory for ecMUL, leave offset for eccAdd result\\n            // base is an array of pointers, so we have to dereference them\\n            mstore(add(free, 0x40), mload(mload(base)))\\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\\n            // Add scalar\\n            mstore(add(free, 0x80), mload(scalars))\\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\\n\\n            let count := 0x01\\n            for {} lt(count, limit) { count := add(count, 1) } {\\n                // Get loop offsets\\n                let base_base := add(base, mul(count, 0x20))\\n                let scalar_base := add(scalars, mul(count, 0x20))\\n\\n                mstore(add(free, 0x40), mload(mload(base_base)))\\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\\n                // Add scalar\\n                mstore(add(free, 0x80), mload(scalar_base))\\n\\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\\n                // accumulator = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\\n            }\\n\\n            // Return the result - i hate this\\n            mstore(result, mload(free))\\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\\n        }\\n    }\\n\\n    function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) internal view returns (bool) {\\n        bytes memory input = abi.encodePacked(\\n            rhs.x,\\n            rhs.y,\\n            // Fixed G1 point\\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\\n            lhs.x,\\n            lhs.y,\\n            // G1 point from VK\\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\\n        );\\n\\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\\n        bool decodedResult = abi.decode(result, (bool));\\n        return success && decodedResult;\\n    }\\n}\\n\\n// Conversion util - Duplicated as we cannot template LOG_N\\nfunction convertPoints(Honk.G1ProofPoint[LOG_N + 1] memory commitments)\\n    pure\\n    returns (Honk.G1Point[LOG_N + 1] memory converted)\\n{\\n    for (uint256 i; i < LOG_N + 1; ++i) {\\n        converted[i] = convertProofPoint(commitments[i]);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x53b6264c492aa965c64cb7ba841634dfd41ab54239d00d2db76b683e62525125\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50615fd08061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea50d0e414610030575b600080fd5b61004361003e366004615ae0565b610057565b604051901515815260200160405180910390f35b6000806100626101b9565b9050600061007087876101ce565b604083015190915084146100b0576040517ffa06659300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100c28287878660400151610b72565b90506101108686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050506060830151608084015186516040870151610c4d565b61018082015260006101228383610d11565b90508061015b576040517f9fc3a21800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610168848685610deb565b9050806101a1576040517fa5d82e8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8180156101ab5750805b9a9950505050505050505050565b6101c1615253565b6101c96118f5565b905090565b6101d661560a565b6101de61560a565b6101ec602060008587615bb3565b6101f591615bdd565b8152610205604060208587615bb3565b61020e91615bdd565b6020820152610221606060408587615bb3565b61022a91615bdd565b6040808301919091528051608080820190925290819061024d9060608789615bb3565b61025691615bdd565b815260200161026960a060808789615bb3565b61027291615bdd565b815260200161028560c060a08789615bb3565b61028e91615bdd565b81526020016102a160e060c08789615bb3565b6102aa91615bdd565b905260608201526040805160808101909152806102cc61010060e08789615bb3565b6102d591615bdd565b81526020016102ea6101206101008789615bb3565b6102f391615bdd565b81526020016103086101406101208789615bb3565b61031191615bdd565b81526020016103266101606101408789615bb3565b61032f91615bdd565b9052608080830191909152604080519182019052806103546101806101608789615bb3565b61035d91615bdd565b81526020016103726101a06101808789615bb3565b61037b91615bdd565b81526020016103906101c06101a08789615bb3565b61039991615bdd565b81526020016103ae6101e06101c08789615bb3565b6103b791615bdd565b905260a08201526040805160808101909152806103da6102006101e08789615bb3565b6103e391615bdd565b81526020016103f86102206102008789615bb3565b61040191615bdd565b81526020016104166102406102208789615bb3565b61041f91615bdd565b81526020016104346102606102408789615bb3565b61043d91615bdd565b90526101008201526040805160808101909152806104616102806102608789615bb3565b61046a91615bdd565b815260200161047f6102a06102808789615bb3565b61048891615bdd565b815260200161049d6102c06102a08789615bb3565b6104a691615bdd565b81526020016104bb6102e06102c08789615bb3565b6104c491615bdd565b90526101208201526040805160808101909152806104e86103006102e08789615bb3565b6104f191615bdd565b81526020016105066103206103008789615bb3565b61050f91615bdd565b81526020016105246103406103208789615bb3565b61052d91615bdd565b81526020016105426103606103408789615bb3565b61054b91615bdd565b905260c082015260408051608081019091528061056e6103806103608789615bb3565b61057791615bdd565b815260200161058c6103a06103808789615bb3565b61059591615bdd565b81526020016105aa6103c06103a08789615bb3565b6105b391615bdd565b81526020016105c86103e06103c08789615bb3565b6105d191615bdd565b90526101408201526040805160808101909152806105f56104006103e08789615bb3565b6105fe91615bdd565b81526020016106136104206104008789615bb3565b61061c91615bdd565b81526020016106316104406104208789615bb3565b61063a91615bdd565b815260200161064f6104606104408789615bb3565b61065891615bdd565b905260e082015261046060005b601c81101561072a576000600861067d836020615c48565b6106879190615c48565b6106919084615c5f565b905060005b60088110156107205760006106ac826020615c48565b6106b69084615c5f565b905060006106c5826020615c5f565b90506106e46106d682848c8e615bb3565b6106df91615bdd565b6121d9565b87610160015186601c81106106fb576106fb615c72565b6020020151846008811061071157610711615c72565b60200201525050600101610696565b5050600101610665565b506107376008601c615c48565b610742906020615c48565b61074c9082615c5f565b905060005b602c8110156107b7576000610767826020615c48565b6107719084615c5f565b90506000610780826020615c5f565b90506107916106d682848a8c615bb3565b85610180015184602c81106107a8576107a8615c72565b60200201525050600101610751565b506107c4602c6020615c48565b6107ce9082615c5f565b905060005b6107df6001601c615ca1565b8110156108ff5760006107f3826080615c48565b6107fd9084615c5f565b9050600061080c826020615c5f565b905080600061081c826020615c5f565b905080600061082c826020615c5f565b905080600061083c826020615c5f565b905060405180608001604052808f8f8b908b9261085b93929190615bb3565b61086491615bdd565b60001c81526020018f8f8990899261087e93929190615bb3565b61088791615bdd565b60001c81526020018f8f879087926108a193929190615bb3565b6108aa91615bdd565b60001c81526020018f8f859085926108c493929190615bb3565b6108cd91615bdd565b90526101a08c01518a601b81106108e6576108e6615c72565b60200201525050600190960195506107d3945050505050565b5061090c6001601c615ca1565b610917906080615c48565b6109219082615c5f565b905060005b601c81101561098c57600061093c826020615c48565b6109469084615c5f565b90506000610955826020615c5f565b90506109666106d682848a8c615bb3565b856101c0015184601c811061097d5761097d615c72565b60200201525050600101610926565b50610999601c6020615c48565b6109a39082615c5f565b90506040518060800160405280868684908560206109c19190615c5f565b926109ce93929190615bb3565b6109d791615bdd565b60001c815260200186868460206109ee9190615c5f565b906109fa866040615c5f565b92610a0793929190615bb3565b610a1091615bdd565b81526020018686610a22856040615c5f565b90610a2e866060615c5f565b92610a3b93929190615bb3565b610a4491615bdd565b81526020018686610a56856060615c5f565b90610a62866080615c5f565b92610a6f93929190615bb3565b610a7891615bdd565b90526101e0830152610a8b816080615c5f565b9050604051806080016040528086868490856020610aa99190615c5f565b92610ab693929190615bb3565b610abf91615bdd565b60001c81526020018686846020610ad69190615c5f565b90610ae2866040615c5f565b92610aef93929190615bb3565b610af891615bdd565b81526020018686610b0a856040615c5f565b90610b16866060615c5f565b92610b2393929190615bb3565b610b2c91615bdd565b81526020018686610b3e856060615c5f565b90610b4a866080615c5f565b92610b5793929190615bb3565b610b6091615bdd565b90526102008301525090505b92915050565b610b7a61583a565b6000610b8886868686612205565b604086019190915260208501919091529083529050610ba7818761265c565b608085019190915260608401919091529050610bc38187612731565b60a08401919091529050610bd6816128b1565b60c08401919091529050610bea8682612914565b60e08401919091529050610bfe86826129eb565b6101008401919091529050610c138682612a79565b6101208401919091529050610c288682612be9565b6101408401919091529050610c3d8682612c5d565b5061016083015250949350505050565b600060018082610c7287610c6d8a610c686106df8a8c615c5f565b612cb5565b612ce2565b90506000610c9188610c8c8b610c686106df8b6001615c5f565b612d0f565b905060005b6043811015610d06576000610cc38c8381518110610cb657610cb6615c72565b60200260200101516121d9565b9050610cd386610c688684612ce2565b9550610ce385610c688584612ce2565b9450610cef848c612ce2565b9350610cfb838c612d0f565b925050600101610c96565b506101ab8484612d65565b6000806001815b6012811015610dcd57600086610160015182601c8110610d3a57610d3a615c72565b602002015190506000610d4d8286612d7b565b905080610d86576040517f9fc3a21800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008760e0015184601c8110610d9e57610d9e615c72565b60200201519050610daf8382612d9f565b9550610dbd88868387612fc1565b9450505050806001019050610d18565b506000610ddb868684612ffe565b90508281145b9695505050505050565b6000610e1f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000610e2f846101200151613078565b9050610e396158b4565b610e416158d3565b6000610e4d87856130dd565b8051610140890151919250610e6e91610c6d908460015b6020020151612cb5565b8552610120870151610e9c90610e8390613170565b82516101408a0151610c689190610c8c90866001610e64565b602086810191909152600184526101e08a015160408051808201825260008082529084015280518082018252828401518351608891821b178252606084015192909301519190921b17918101919091528252600160608601819052600060808701525b60238111610fa557610f21610f178760000151613204565b8760600151612cb5565b8482604a8110610f3357610f33615c72565b602002015260808601516101808b0151610f769190610c6d90610f57600186615ca1565b602c8110610f6757610f67615c72565b60200201518960600151612cb5565b60808701526060860151610100890151610f909190612cb5565b6060870152610f9e81615cb4565b9050610eff565b506000610fb460236001615c5f565b90505b602c811161103457610fcf610f178760200151613204565b8482604a8110610fe157610fe1615c72565b602002015260808601516101808b01516110059190610c6d90610f57600186615ca1565b6080870152606086015161010089015161101f9190612cb5565b606087015261102d81615cb4565b9050610fb7565b50606088015182600160200201526080880151826002602002015260a0880151826003602002015260c0880151826004602002015260e08801518260056020020152610100880151826006602002015261012088015182600760200201526101408801518260086020020152610180880151826009602002015261016088015182600a60200201526101a088015182600b60200201526101c088015182600c60200201526101e088015182600d602002015261020088015182600e602002015261022088015182600f60200201526102408801518260106020020152610260880151826011602002015261028088015182601260200201526102a088015182601360200201526102c088015182601460200201526102e08801518260156020020152610300880151826016602002015261032088015182601760200201526103408801518260186020020152610360880151826019602002015261038088015182601a60200201526103a088015182601b602002015260608901516111ff906040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b6103808301526080890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103a083015260a0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103c083015260c0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103e083015260e0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610400830152610140890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610420830152610100890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610440830152610120890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526104608301526103008801516104808301526103208801516104a08301526103408801516104c08301526103608801516104e0830152606089810151604080518082018252600080825260209182015281518083018352818401518451608891821b1782529484015192909301519190931b17918101919091526105008301526080890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261052083015260a0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261054083015260c0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261056083015260e0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610580830152600060408601526101408701516115bb90613230565b606086015260005b6115cf6001601c615ca1565b81101561173f5760006115e460016012615ca1565b821015905060008161164e5760608801516116159085611605866002615c5f565b601d8110610e6457610e64615c72565b905061162081613204565b868461162e602c6001615c5f565b6116389190615c5f565b604a811061164857611648615c72565b60200201525b61167d8860400151610c6d838f6101c0015187600161166d9190615c5f565b601c8110610e6457610e64615c72565b604089015260608801516101408b01516116979190612cb5565b60608901526101a08c01516117089084601b81106116b7576116b7615c72565b60200201516040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b8584611716602c6001615c5f565b6117209190615c5f565b604a811061173057611730615c72565b602002015250506001016115c3565b5060006117578887608001518c6101c001518861323c565b604087015190915061176f90610c6d83856000610e64565b604087018190526101c08b0151516101408a015161179e9291610c6d916117969190612cb5565b856001610e64565b60408088019190915280518082019091526001815260026020820152836117c7601c602c615c5f565b604a81106117d7576117d7615c72565b60200201526040860151846117ee601c602c615c5f565b604a81106117fe576117fe615c72565b60200201526102008a015160009061185c906040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b9050808461186c601c602c615c5f565b611877906001615c5f565b604a811061188757611887615c72565b60200201526101608901518561189f601c602c615c5f565b6118aa906001615c5f565b604a81106118ba576118ba615c72565b602002015260006118cb8587613341565b905060006118d883613414565b90506118e4828261348c565b9d9c50505050505050505050505050565b6118fd615253565b50604080516103c0810182526204000081526012602080830191909152604382840152825180840184526000808252818301526060830152825180840184527e23296072ba882e23ed90ee1dac8eedbb30e5b4fbbf6a8be14cc97eaa44669381527f1540513d0b8971ae7c56b28838a830801b04cc4f3a3dde06c3eac3410a2ee9c4818301526080830152825180840184527f128f4689193e8d7e352ac5f0afe29ff277d1b8b08807981784a590b82a9b5e2e81527f1aa8be7d44f5bf4c12440bd390aeb102e211af54f0c176e5a7aaecdf495435748183015260a0830152825180840184527f2b0a33558c2603b6bc43635665be9da0f5e2f623bea9e22dd055c74324d7f12281527f162d39578897a70f2dc851710de29d3dd6fae4e768f2c841aa7b95834ceae5cb8183015260c0830152825180840184527f262d979b29df1669541daa3f02157701ff7ab07a6f5317d2e4d1c4c2106e17e381527f06af46ef2dc4282de259c7e02867c3c77a799af864e2370f61a8f1aec7a7f4098183015260e0830152825180840184527f0e45f7edf0975574a0234a5c0510af9251c52534b527f8af7bd17a4c6095909681527f2053c39f8961e378924eb488270ae9caab9db0bbf2d2937c0fef89a40000d21481830152610100830152825180840184527f24792fa51f5beafb9c4eff1a8bf1a9a6ccd9a02877d64ec78becc03bc9f7d1ff81527f2b3a9b5ddd9cf49b41974c5cb73e39997fd915a8df5b8458fa08d02a55a9644381830152610120830152825180840184527f1df1862c3cd967cf4e80a289e6fec969049ae11aac5a796ac650315d22e580fb81527f2afb83456939046324306525332ef3307638d6766ff90e40559aa45e471b871b81830152610140830152825180840184527f1c2f84adf95896cf0018ae79ebbdeb2468b1404953a855ec2facc4b49449543381527f0a175b5ba1452877e6cb7ac6ca850788f7e17a56f310cb5f18d9642b7bdcbcf281830152610160830152825180840184527f286ee766413caa93518a7570875801a9159d2e1315c1ab5bc9e52595a830c49581527f045175bd839a41eda5e9b6a40f76bbbf2723a68e1e7ecd739bd97ae093cd652881830152610180830152825180840184527f22ffd03e53836f0a9271398e34a792953979926b49a76c967c71cc8af35e04bb81527f02e2ae071779429f971820e5d680764ae55b0a0db4bc14709d47abc261cfe64c818301526101a0830152825180840184527f034ab86a5bccfa4f69637da232ba777f403c1aeb69ad6040d432a795e1b382c281527f09a353e2a34ad0af28688dbf4c01cc7de2c9878d6a1b80ce58e567d6c48b5bec818301526101c0830152825180840184527f1a65519a1ab82173d9cb9dc061f62c9d53ef95915b0cc76feb9feb90351e810d81527f29c0afd9c7eeae8e1635b3835090d59d5344bd56cf3c71487adcf6d8c5844348818301526101e0830152825180840184527f139c2f5bba86aea351df6608e3f1cd26b3c0b4371dca357e701a6025f94be1e781527f22399eb57ad19a4409a194335726da4d76a0cf2d0d89a50dbc7f687de1aad8c381830152610200830152825180840184527f0ff16a5ae01ecffc7815eb75c174ad14281aa49059929907518634d841c628f581527f2d867f1d311969273bc82b184e63d9269b182a881d3b302b242a4dc93462f7b781830152610220830152825180840184527f0821760c77fc15784afcaff815f73f8f90aa38ebe34d3b48695e3a6ad08ed8b081527f2f51bc8941e5c577f7ec1d5bb038bd902c7a5c7dd1389bab38b9c89ec4ab7d2981830152610240830152825180840184527f0ffd51787978d66be3b7e70e810c4575178c9f45674db1b870595ce7e2fb5f6f81527f17a63d56e53061da2fe13b311859cb536d18d6060100c393c5bb9251dfbad74a81830152610260830152825180840184527f024dcf715a66fd964f629553ae2bcb51c127b813ed7f9a4b28b481fb9e2c377281527f20244a5d7222400941070d0355a58d34ab8ff9b0d8935fd8c9225059f13fcaac81830152610280830152825180840184527f02987fe7cdb3cab8ebf18ecc8711b792828a0670bd9bcd17442c4a157325c8ef81527f1c9fa626c623b3102d77b2878a9de76dd9a1837521baa49c6874797a8e5a9626818301526102a0830152825180840184527f130b070560870337eb165683645e3c8522d6449e1367a35c5cf00dd4462fd96781527f01fe23c3926178b337c362c53b74d2233d08cf587bb0f114ebfe21542c9645e5818301526102c0830152825180840184527f153a7f8639e06461474e00018cde1ac1acf38089893c5515de20804922c0321981527f0939c3d22ab03cefb504fe214af93d65912ae3750ce6b756b0e02c9ce7a16e68818301526102e0830152825180840184527f234c57b9aab8dfb66855cbb2ed5c7dcaa724527a8b5abae05dbfc771da6679cc81527f22060d556338e2843aed696c8fc98bf0c6d133543b5c8774daf51221e0eafb4481830152610300830152825180840184527f2c931d2ddd0a37bf249ba13d4c0005dcf10f905b44f587692f7e19c4325beece81527f02d3dc1f3ed31519bae6c333e090615800a04cfdc9d6233f823114a44746d50181830152610320830152825180840184527f06246fd4811f690574ddc55745590439a8f73455e78fdd3521d65c7e007e6b4581527f1e132a30f5aa1d892595234280dd91b7728b3dadc7b72e58f2a95148f38ba21081830152610340830152825180840184527f1e0181f12b41a00b4ee891ed5a942bfdbae834b4faf95ce9e9aaa9bd2500ce6381527f1b6f032aa6b07625de54649d25628c9a5c45ab7c6c13a88fdd31ca7ecce024af81830152610360830152825180840184527f19b09aa2fcb34ae480845aa4ad56e01616ae845300e6f676fdb84f4bd396851b81527f295d8a6bfcce573b23d5eefd0aab6d32479423acd4956ce6deb5a67073f032d58183015261038083015282518084019093527f08d314a75c6b1f82d70f2edc7b7bf6e7397bc04bc6aaa0584b9e5bbb7689082b83527f0100000000000000000000000000000000000000000000000000000000000000908301526103a081019190915290565b6000610b6c7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183615d1b565b600080808080612216866003615c5f565b61222190600c615c5f565b67ffffffffffffffff81111561223957612239615d2f565b604051908082528060200260200182016040528015612262578160200160208202803683370190505b509050886000015160001b8160008151811061228057612280615c72565b602002602001018181525050886020015160001b816001815181106122a7576122a7615c72565b602002602001018181525050886040015160001b816002815181106122ce576122ce615c72565b60200260200101818152505060005b8681101561232f578888828181106122f7576122f7615c72565b905060200201358282600361230c9190615c5f565b8151811061231c5761231c615c72565b60209081029190910101526001016122dd565b5060608901515181612342886003615c5f565b8151811061235257612352615c72565b60209081029190910181019190915260608a0151015181612374886003615c5f565b61237f906001615c5f565b8151811061238f5761238f615c72565b6020908102919091010152606089015160400151816123af886003615c5f565b6123ba906002615c5f565b815181106123ca576123ca615c72565b60209081029190910101526060808a01510151816123e9886003615c5f565b6123f4906003615c5f565b8151811061240457612404615c72565b602090810291909101015260808901515181612421886003615c5f565b61242c906004615c5f565b8151811061243c5761243c615c72565b60209081029190910181019190915260808a015101518161245e886003615c5f565b612469906005615c5f565b8151811061247957612479615c72565b602090810291909101015260808901516040015181612499886003615c5f565b6124a4906006615c5f565b815181106124b4576124b4615c72565b6020908102919091010152608089015160600151816124d4886003615c5f565b6124df906007615c5f565b815181106124ef576124ef615c72565b602090810291909101015260a0890151518161250c886003615c5f565b612517906008615c5f565b8151811061252757612527615c72565b60209081029190910181019190915260a08a0151015181612549886003615c5f565b612554906009615c5f565b8151811061256457612564615c72565b602090810291909101015260a08901516040015181612584886003615c5f565b61258f90600a615c5f565b8151811061259f5761259f615c72565b602090810291909101015260a089015160600151816125bf886003615c5f565b6125ca90600b615c5f565b815181106125da576125da615c72565b602002602001018181525050612615816040516020016125fa9190615d5e565b604051602081830303815290604052805190602001206121d9565b9150612620826136a0565b604080516020810186905292975090955061263b91016125fa565b91506000612648836136a0565b50959a949950949750909550919350505050565b600080600061266961590d565b8581526101008581018051516020808501919091528151810151604080860191909152825181015160608087019190915292518301516080860152610120808a0180515160a0880152805184015160c080890191909152815184015160e089015290518501519587019590955293890180515194860194909452835182015161014086015283518101516101608601529251909101516101808401529051612717916125fa91849101615d94565b9150612722826136a0565b90979096509194509092505050565b61273961592c565b600061274361594b565b8481526101408401805151602080840191909152815181015160408085019190915282518101516060808601919091529251830151608085015260e080880180515160a0870152805184015160c0870152805183015191860191909152519092015161010084015290516127bd916125fa91849101615dc9565b91506127c8826136a0565b6020850152835260015b6127de60026019615dfe565b81101561285e576127fb836040516020016125fa91815260200190565b9250612806836136a0565b85612812846002615c48565b6019811061282257612822615c72565b6020020186612832856002615c48565b61283d906001615c5f565b6019811061284d5761284d615c72565b6020020191909152526001016127d2565b50612875826040516020016125fa91815260200190565b91506000612882836136a0565b8561288f60016019615ca1565b6019811061289f5761289f615c72565b60200201919091525050509250929050565b6128b961596a565b6000805b601c81101561290d576128dc846040516020016125fa91815260200190565b935060006128e9856136a0565b8584601c81106128fb576128fb615c72565b602002019190915250506001016128bd565b5090929050565b61291c61596a565b6000805b601c8110156129e25761293161594b565b84815260005b600881101561299b5786610160015183601c811061295757612957615c72565b6020020151816008811061296d5761296d615c72565b60200201518261297e836001615c5f565b6009811061298e5761298e615c72565b6020020152600101612937565b506129b0816040516020016125fa9190615dc9565b945060006129bd866136a0565b8685601c81106129cf576129cf615c72565b6020020191909152505050600101612920565b50909391925050565b6000806129f6615989565b83815260005b602c811015612a4a5785610180015181602c8110612a1c57612a1c615c72565b602002015182612a2d836001615c5f565b602d8110612a3d57612a3d615c72565b60200201526001016129fc565b50612a5f816040516020016125fa9190615e12565b91506000612a6c836136a0565b5096929550919350505050565b600080612a846159a8565b83815260005b612a966001601c615ca1565b811015612bd457856101a0015181601b8110612ab457612ab4615c72565b60200201515182612ac6836004615c48565b612ad1906001615c5f565b606d8110612ae157612ae1615c72565b60200201526101a086015181601b8110612afd57612afd615c72565b60200201516020015182826004612b149190615c48565b612b1f906002615c5f565b606d8110612b2f57612b2f615c72565b60200201526101a086015181601b8110612b4b57612b4b615c72565b60200201516040015182612b60836004615c48565b612b6b906003615c5f565b606d8110612b7b57612b7b615c72565b60200201526101a086015181601b8110612b9757612b97615c72565b60200201516060015182612bac836004615c48565b612bb7906004615c5f565b606d8110612bc757612bc7615c72565b6020020152600101612a8a565b50612a5f816040516020016125fa9190615e47565b600080612bf46159c7565b83815260005b601c811015612c4857856101c0015181601c8110612c1a57612c1a615c72565b602002015182612c2b836001615c5f565b601d8110612c3b57612c3b615c72565b6020020152600101612bfa565b50612a5f816040516020016125fa9190615e7c565b600080612c686159e6565b8381526101e085018051516020808401919091528151810151604080850191909152825181015160608086019190915292519092015160808401529051612a5f916125fa91849101615eb1565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284099392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284089392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612d5c837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b84089392505050565b6000612d7483610c6884613170565b9392505050565b81516000908190612d94908560015b6020020151612ce2565b929092149392505050565b6000806040518061010001604052807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec5181526020016102d081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff118152602001609081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71815260200160f081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd3181526020016113b081525090506000604051806101000160405280600081526020016001815260200160028152602001600381526020016004815260200160058152602001600681526020016007815250905060006001905060005b6008811015612ed457612eca82610c688884612d0f565b9150600101612eb3565b50612edd615a04565b60005b6008811015612f56576000858260088110612efd57612efd615c72565b60200201519050612f2881610c688a888660088110612f1e57612f1e615c72565b6020020151612d0f565b9050612f3381613170565b905080838360088110612f4857612f48615c72565b602002015250600101612ee0565b5060005b6008811015612fab576000888260088110612f7757612f77615c72565b60200201519050612f9481848460088110610e6457610e64615c72565b9050612fa08782612ce2565b965050600101612f5a565b50612fb68583612cb5565b979650505050505050565b600080612ff26001610c6d86610c688a60c0015188601c8110612fe657612fe6615c72565b60200201516001612d0f565b9050610de18582612cb5565b61018083015160009061300f615a23565b61301a8282866136da565b6130268286838761388b565b61303282868387613a79565b61303d828286613c80565b613048828286613e72565b613054828683876141d1565b61305f828286614ade565b61306a828286614eba565b610de1818660a001516151bc565b61308061596a565b81815260015b601c8110156130d7576130b88261309e600184615ca1565b601c81106130ae576130ae615c72565b6020020151613230565b8282601c81106130ca576130ca615c72565b6020020152600101613086565b50919050565b6130e56159c7565b6101608301516130ff6130fa82856000612f1e565b613170565b825260005b601c81101561316857600061311b60126001615c5f565b821161313d5761313a6130fa848785601c8110612d8a57612d8a615c72565b90505b808461314a846001615c5f565b601d811061315a5761315a615c72565b602002015250600101613104565b505092915050565b6000808290506000604051602081526020808201526020604082015282606082015260027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360808201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08201526020600060c08360055afa9050806131f857600080fd5b50506000519392505050565b6000610b6c827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b6000610b6c8283612cb5565b6000601c5b801561333757600083613255600184615ca1565b601c811061326557613265615c72565b6020020151905060008760e001516001846132809190615ca1565b601c811061329057613290615c72565b602002015190506000866132a5600186615ca1565b601c81106132b5576132b5615c72565b6020020151905060006132f16132d56132ce868c612cb5565b6002612cb5565b610c8c84610c686132eb89610c6860018b612d0f565b88612d0f565b905061331281610c686130fa61330c88610c6860018a612d0f565b87612ce2565b90506012851180613321578199505b50505050508061333090615ee5565b9050613241565b5092949350505050565b60408051808201909152600080825260208201526000613363601c602c615c5f565b61336e906002615c5f565b90506001604051855151604082015285516020015160608201528451608082015260408160606040840160075afa8216915060015b838110156133fc5760208102870160208202870181515160408501528151602001516060850152805160808501525050604080830160606040850160075afa8316925060408260808460065afa909216916001016133a3565b50805184526020810151602085015250505092915050565b60408051808201909152600080825260208201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476134799190615ca1565b6134839190615d1b565b60208301525090565b81516020808401518351848301516040805194850195909552938301919091527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260608301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60808301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c083015260e08201526101008101919091527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16101208201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06101408201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46101608201527f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e5561018082015260009081906101a0016040516020818303038152906040529050600080600873ffffffffffffffffffffffffffffffffffffffff16836040516136319190615f1a565b600060405180830381855afa9150503d806000811461366c576040519150601f19603f3d011682016040523d82523d6000602084013e613671565b606091505b509150915060008180602001905181019061368c9190615f49565b9050828015612fb657509695505050505050565b600080826fffffffffffffffffffffffffffffffff8116608082901c6136c5826121d9565b94506136d0816121d9565b9350505050915091565b60006136e7846006615222565b90507f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000600061374a61374461371d856003612d0f565b610c6861373961372e8b6000615222565b610c688c601c615222565b610c688b601b615222565b83612cb5565b90506137cb6137c06137a761378e61377585610c6d61376a8d6002615222565b610c688e601b615222565b610c6d6137838c6003615222565b610c688d601c615222565b610c6d61379c8b6004615222565b610c688c601d615222565b610c6d6137b58a6005615222565b610c688b601e615222565b610c6d886001615222565b90506137ea81610c6d6137df866001612d0f565b610c688a602a615222565b90506137f68184612cb5565b90506138028185612cb5565b8552506000905061383e61383361382861381d88601b615222565b610c6d89601e615222565b610c8c886027615222565b610c6d876000615222565b905061384f81610c68846002612d0f565b905061386081610c68846001612d0f565b905061386c8183612cb5565b90506138788184612cb5565b9050808460015b60200201525050505050565b60008060006138c36138b96138a189601b615222565b610c6d6138af8b6011615222565b8a60600151612cb5565b8760800151612ce2565b90506138fc81610c686138f26138da8b601c615222565b610c6d6138e88d6012615222565b8c60600151612cb5565b8960800151612ce2565b905061392181610c686138f26139138b601d615222565b610c6d6138e88d6013615222565b905061394681610c686138f26139388b601e615222565b610c6d6138e88d6014615222565b92506000905061396b6138b961395d89601b615222565b610c6d6138af8b600d615222565b905061399081610c686138f26139828b601c615222565b610c6d6138e88d600e615222565b90506139b581610c686138f26139a78b601d615222565b610c6d6138e88d600f615222565b90506139da81610c686138f26139cc8b601e615222565b610c6d6138e88d6010615222565b915060009050613a026139fc6139f189601f615222565b610c6d8a6019615222565b84612cb5565b9050613a3881610c8c613a32613a198b602b615222565b610c6d613a278d601a615222565b8c6101800151612cb5565b85612cb5565b9050613a448185612cb5565b6040860152506000613a68613a32613a5d89601a615222565b610c688a602b615222565b606090950194909452505050505050565b600080613ad8613ac0613aa8613a936138f28a6015615222565b610c6d613aa18b6016615222565b8a51612cb5565b610c6d613ab68a6017615222565b8960200151612cb5565b610c6d613ace896018615222565b8860400151612cb5565b91506000613b10613af7613aed89601b615222565b8860800151612ce2565b610c6d613b058a6003615222565b610c688b6027615222565b90506000613b3b613b2289601c615222565b610c6d613b308b6000615222565b610c688c6028615222565b90506000613b66613b4d8a601d615222565b610c6d613b5b8c6001615222565b610c688d6029615222565b9050613ba6613b8e613b8085610c6d868d60000151612cb5565b610c6d848c60200151612cb5565b610c6d613b9c8c6004615222565b8b60400151612cb5565b93505050506000613bbb6139fc886020615222565b90506000613bcd6139fc896020615222565b90506000613c06613bed613be28b6022615222565b610c6d8c600a615222565b610c8c613bfb8c6022615222565b610c688d600a615222565b90506000613c2b613c25613c1a8789612cb5565b610c688d6020615222565b83612d0f565b9050613c378188612cb5565b90506000613c60613c52613c4c8d600a615222565b87612cb5565b610c8c613c4c8e6021615222565b60808a018390529050808960055b60200201525050505050505050505050565b6000613c8e60006001612d0f565b90506000613c9e60006002612d0f565b90506000613cae60006003612d0f565b90506000613ccb613cc088601c615222565b610c8c89601b615222565b90506000613ce8613cdd89601d615222565b610c8c8a601c615222565b90506000613d05613cfa8a601e615222565b610c8c8b601d615222565b90506000613d22613d178b6027615222565b610c8c8c601e615222565b905083613d3381610c68818b612ce2565b9050613d4381610c68878a612ce2565b9050613d5381610c688789612ce2565b9050613d6481610c688d6007615222565b9050613d70818a612cb5565b60c08b01525082613d8581610c68818b612ce2565b9050613d9581610c68868a612ce2565b9050613da581610c688689612ce2565b9050613db681610c688d6007615222565b9050613dc2818a612cb5565b60e08b01525081613dd781610c68818b612ce2565b9050613de781610c68858a612ce2565b9050613df781610c688589612ce2565b9050613e0881610c688d6007615222565b9050613e14818a612cb5565b6101008b01525080613e2a81610c68818b612ce2565b9050613e3a81610c68848a612ce2565b9050613e4a81610c688489612ce2565b9050613e5b81610c688d6007615222565b9050613e67818a612cb5565b9050808a6009613c6e565b613eb26040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b613ebd84601c615222565b8152613eca84601d615222565b6020820152613eda846027615222565b6040820152613eea84602a615222565b6060820152613efa846029615222565b6080820152613f0a846028615222565b60a08201526000613f1c856002615222565b90506000613f2b866000615222565b90506000613f4184604001518560000151612d0f565b90506000613f5785602001518660200151612cb5565b60608601519091508690600090613f6e9080612cb5565b90506000613f8d613f8789602001518a60600151612cb5565b88612cb5565b90506000613fad613fa68a60a001518b60400151612ce2565b8a51612ce2565b9050613fbc613c4c8288612cb5565b9050613fdd613fd7613fd16132eb8487612d0f565b84612ce2565b83612ce2565b9050614005613ffa613fef8387612cb5565b610c688f6008615222565b610c6860018a612d0f565b6101408c0152505050506020850151608086015160009161402591612ce2565b9050600061404461403a886060015188612cb5565b8860200151612d0f565b9050600061406a6140558487612cb5565b610c6d613a328b60a001518c60000151612d0f565b905061409261408761407c838c612cb5565b610c688e6008615222565b610c68600189612d0f565b6101608b015250600091506140b490506140ad836011612ce2565b8751612cb5565b905060006140c28384612ce2565b90506140ce8182612ce2565b905060006140dd836009612cb5565b90506141076141016139fc6140fa8b60a001518c60000151612ce2565b8b51612ce2565b82612d0f565b60c0890181905260009061412390613f8790613fef908d612cb5565b90506141368b600a602002015182612ce2565b6101408c0152505086516000925061415e91506140ad906141579080612ce2565b8851612ce2565b905060006141a061417b83610c688a600001518b60a00151612d0f565b6020890151610c8c9061418e9080612ce2565b610c688b602001518c60800151612ce2565b90506141bd89600b6020020151610c6d613f87613fef858d612cb5565b89600b602002015250505050505050505050565b61427b604051806102c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6142b061429761428c87601b615222565b610c68886028615222565b610c6d6142a5886027615222565b610c6889601c615222565b81526142f56142ea6142d16142c688601b615222565b610c6889601e615222565b610c6d6142df89601c615222565b610c688a601d615222565b610c8c876029615222565b6040820181905261430f9068100000000000000000612cb5565b6040820181905261432590610c8c87602a615222565b6040820181905281516143389190612ce2565b6040820181905261434e90610c68876005615222565b604082015280516143689068100000000000000000612cb5565b80825261438890610c6d61437d886027615222565b610c68896028615222565b808252602082018190526143a490610c8c61381d88601d615222565b602082018190526143ba90610c68876004615222565b60208201528051606082018190526143d790610c6d87601e615222565b606082018190526143fb90610c8c6143f0886029615222565b610c6d89602a615222565b6060820181905261441190610c68876000615222565b816060018181525050600061443b61443183602001518460400151612ce2565b8360600151612ce2565b905061444c81610c68886003615222565b905061446461445c876028615222565b614000612cb5565b6080830181905261447a90610c6d886027615222565b6080830181905261448d90614000612cb5565b608083018190526144a390610c6d88601d615222565b608083018190526144b690614000612cb5565b608083018190526144cc90610c6d88601c615222565b608083018190526144df90614000612cb5565b608083018190526144f590610c6d88601b615222565b6080830181905261450b90610c8c88601e615222565b6080830181905261452190610c68886005615222565b608083015261453461445c876029615222565b60a0830181905261454a90610c6d886028615222565b60a0830181905261455d90614000612cb5565b60a0830181905261457390610c6d886027615222565b60a0830181905261458690614000612cb5565b60a0830181905261459c90610c6d88601e615222565b60a083018190526145af90614000612cb5565b60a083018190526145c590610c6d88601d615222565b60a083018190526145db90610c8c88602a615222565b60a083018190526145f190610c68886000615222565b60a08301819052608083015160009161460a9190612ce2565b905061461b81610c68896004615222565b905061463561462b88601d615222565b8760400151612cb5565b60c0840181905261464e90610c6d613ab68a601c615222565b60c0840181905261466e90610c6d6146678a601b615222565b8951612cb5565b60c0840181905261468490610c6d896001615222565b60c0840181905260e084018190526146a190610c8c89601e615222565b60c08401526146b4613cc0886027615222565b6101408401526146d36146c888602a615222565b610c8c89601e615222565b6101208401526101408301516146f8906146ed9080612cb5565b846101400151612d0f565b61028084015261014083015161474d906147429061473b90610c6860017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b6001612ce2565b846101200151612cb5565b61016084018190526147849061477690610c6861476b8b6002615222565b610c688c6003615222565b610c68613c4c8a6009615222565b6101a08601526102808301516147a69061477690610c6861476b8b6002615222565b6101c086015260c08301516147ce90610c686147c38a6002615222565b610c688b6003615222565b6101e084015260006147ee6147e489601e615222565b8560e00151612d0f565b90506147fd6141018283612cb5565b6101a0850152614811613ace896029615222565b610100850181905261483590610c6d61482b8b6028615222565b8a60200151612cb5565b610100850181905261484f90610c6d613aa18b6027615222565b61010085015261486e61486389602a615222565b856101000151612d0f565b6101008501526000614884613cfa8a6029615222565b90506148fe6148c561374461473b88610140015160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610c689190615ca1565b610c6861473b88610100015160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610c689190615ca1565b610180860152610100850151614923906149189080612cb5565b866101000151612d0f565b6101c08601526101808501516149569061494290610c688c6006615222565b610c686149508c6009615222565b89612cb5565b6101e08801526102808501516149759061494290610c688c6006615222565b6102008801526101c08501516149949061494290610c688c6006615222565b6102208801526101a08501516149af90610c688b6006615222565b6102008601526149ce6149c38a6028615222565b610c8c8b601c615222565b610220860152610140850151614a2090613cfa90614a159061473b90610c6860017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b876102200151612cb5565b61024086018190526101e08601516102608701819052614a5791610c6d90610c68614a4c8e6005615222565b610c688f6002615222565b610260860181905260c0860151614a7b9190610c6d90610c68614a4c8e6000615222565b6102608601819052610200860151614a939190612ce2565b6102608601819052614aa990613fd19086612ce2565b6102a08601819052614ac390610c686149508c6009615222565b6102a0860181905287600c6020020152505050505050505050565b614b6560405180610220016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b614b7e614b7385601b615222565b610c6d866002615222565b8152614b99614b8e85601c615222565b610c6d866003615222565b6020820152614bb7614bac85601d615222565b610c6d866004615222565b6040820152614bd5614bca85601e615222565b610c6d866005615222565b60608201528051614c0790614c0090614bf990614bf29080612cb5565b8451612cb5565b8351612cb5565b8251612cb5565b60808201526020810151614c4590614c3b90614c3190614c279080612cb5565b8460200151612cb5565b8360200151612cb5565b8260200151612cb5565b60a08201526040810151614c8390614c7990614c6f90614c659080612cb5565b8460400151612cb5565b8360400151612cb5565b8260400151612cb5565b60c08201526060810151614cc190614cb790614cad90614ca39080612cb5565b8460600151612cb5565b8360600151612cb5565b8260600151612cb5565b60e0820152608081015160a0820151614cda9190612ce2565b61010082015260c081015160e0820151614cf49190612ce2565b61012082015260a0810151614d1890614d0d9080612ce2565b826101200151612ce2565b61014082015260e0810151614d3c90614d319080612ce2565b826101000151612ce2565b610160820152610120810151614d529080612ce2565b6101e08201819052614d7390614d689080612ce2565b826101600151612ce2565b6101e0820152610100810151614d899080612ce2565b6101a08201819052614daa90614d9f9080612ce2565b826101400151612ce2565b6101a08201819052610160820151614dc191612ce2565b6101808201526101408101516101e0820151614ddd9190612ce2565b6101c0820152614df161374485600b615222565b6102008201819052610240840151610180830151614e1c92610c6d91610c6890610c8c8a6027615222565b8360126020020152614e4c8360136020020151610c6d836102000151610c68856101a00151610c8c8a6028615222565b8360136020020152614e7c8360146020020151610c6d836102000151610c68856101c00151610c8c8a6029615222565b8360146020020152614eac8360156020020151610c6d836102000151610c68856101e00151610c8c8a602a615222565b836015602002015250505050565b614f1760405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006040518060800160405280614f4d7f10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e76121d9565b8152602001614f7b7f0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b6121d9565b8152602001614fa87e544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac156121d9565b8152602001614fd67f222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b6121d9565b90529050614ff3614fe886601b615222565b610c6d876002615222565b61012083018190526150279061501c90614742906150119080612cb5565b856101200151612cb5565b836101200151612cb5565b825261503485601c615222565b602083015261504485601d615222565b604083015261505485601e615222565b60608301528151602083015161507c91614431916150729190612ce2565b8460400151612ce2565b608083015261508f6139fc86600c615222565b61014083015281516150b1906150a790836000610e64565b8360800151612ce2565b60a08301526150dd8460166020020151610c6d846101400151610c688660a00151610c8c8b6027615222565b6102c085015260208201516150f8906150a790836001610e64565b60c08301526151248460176020020151610c6d846101400151610c688660c00151610c8c8b6028615222565b6102e0850152604082015161513f906150a790836002610e64565b60e083015261516b8460186020020151610c6d846101400151610c688660e00151610c8c8b6029615222565b6103008501526060820151615186906150a790836003610e64565b6101008301526151b48460196020020151610c6d846101400151610c68866101000151610c8c8b602a615222565b84601961387f565b60006151c9818481612d8a565b905060015b601a81101561521b5761521182610c6d8684601a81106151f0576151f0615c72565b602002015186615201600187615ca1565b60198110610e6457610e64615c72565b91506001016151ce565b5092915050565b60008282602b81111561523757615237615f6b565b602c811061524757615247615c72565b60200201519392505050565b604051806103c00160405280600081526020016000815260200160008152602001615291604051806040016040528060008152602001600081525090565b81526020016152b3604051806040016040528060008152602001600081525090565b81526020016152d5604051806040016040528060008152602001600081525090565b81526020016152f7604051806040016040528060008152602001600081525090565b8152602001615319604051806040016040528060008152602001600081525090565b815260200161533b604051806040016040528060008152602001600081525090565b815260200161535d604051806040016040528060008152602001600081525090565b815260200161537f604051806040016040528060008152602001600081525090565b81526020016153a1604051806040016040528060008152602001600081525090565b81526020016153c3604051806040016040528060008152602001600081525090565b81526020016153e5604051806040016040528060008152602001600081525090565b8152602001615407604051806040016040528060008152602001600081525090565b8152602001615429604051806040016040528060008152602001600081525090565b815260200161544b604051806040016040528060008152602001600081525090565b815260200161546d604051806040016040528060008152602001600081525090565b815260200161548f604051806040016040528060008152602001600081525090565b81526020016154b1604051806040016040528060008152602001600081525090565b81526020016154d3604051806040016040528060008152602001600081525090565b81526020016154f5604051806040016040528060008152602001600081525090565b8152602001615517604051806040016040528060008152602001600081525090565b8152602001615539604051806040016040528060008152602001600081525090565b815260200161555b604051806040016040528060008152602001600081525090565b815260200161557d604051806040016040528060008152602001600081525090565b815260200161559f604051806040016040528060008152602001600081525090565b81526020016155c1604051806040016040528060008152602001600081525090565b81526020016155e3604051806040016040528060008152602001600081525090565b8152602001615605604051806040016040528060008152602001600081525090565b905290565b6040518061022001604052806000815260200160008152602001600081526020016156566040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156866040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156b66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156e66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157166040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157466040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157766040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157a66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157b3615a42565b81526020016157c0615a70565b81526020016157cd615a8f565b81526020016157da61596a565b815260200161580a6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156056040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200161587161592c565b815260200161587e61596a565b815260200161588b61596a565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806109400160405280604a906020820280368337509192915050565b604051806109400160405280604a905b60408051808201909152600080825260208201528152602001906001900390816158e35790505090565b604051806101a00160405280600d906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b604051806103800160405280601c906020820280368337509192915050565b604051806105a00160405280602d906020820280368337509192915050565b60405180610da00160405280606d906020820280368337509192915050565b604051806103a00160405280601d906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b604051806103800160405280601c905b615a5a615a04565b815260200190600190039081615a525790505090565b604051806105800160405280602c906020820280368337509192915050565b604051806103600160405280601b905b615aca6040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200190600190039081615a9f5790505090565b60008060008060408587031215615af657600080fd5b843567ffffffffffffffff811115615b0d57600080fd5b8501601f81018713615b1e57600080fd5b803567ffffffffffffffff811115615b3557600080fd5b876020828401011115615b4757600080fd5b60209182019550935085013567ffffffffffffffff811115615b6857600080fd5b8501601f81018713615b7957600080fd5b803567ffffffffffffffff811115615b9057600080fd5b8760208260051b8401011115615ba557600080fd5b949793965060200194505050565b60008085851115615bc357600080fd5b83861115615bd057600080fd5b5050820193919092039150565b80356020831015610b6c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610b6c57610b6c615c19565b80820180821115610b6c57610b6c615c19565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610b6c57610b6c615c19565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615ce557615ce5615c19565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082615d2a57615d2a615cec565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8151600090829060208501835b82811015615d89578151845260209384019390910190600101615d6b565b509195945050505050565b60008183825b600d811015615db9578151835260209283019290910190600101615d9a565b5050506101a08201905092915050565b60008183825b6009811015615dee578151835260209283019290910190600101615dcf565b5050506101208201905092915050565b600082615e0d57615e0d615cec565b500490565b60008183825b602d811015615e37578151835260209283019290910190600101615e18565b5050506105a08201905092915050565b60008183825b606d811015615e6c578151835260209283019290910190600101615e4d565b505050610da08201905092915050565b60008183825b601d811015615ea1578151835260209283019290910190600101615e82565b5050506103a08201905092915050565b60008183825b6005811015615ed6578151835260209283019290910190600101615eb7565b50505060a08201905092915050565b600081615ef457615ef4615c19565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000825160005b81811015615f3b5760208186018101518583015201615f21565b506000920191825250919050565b600060208284031215615f5b57600080fd5b81518015158114612d7457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220713aa0ceca32cc201db9cc83c7b665d6bec0c53ae3338734af7de9935d933c1964736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea50d0e414610030575b600080fd5b61004361003e366004615ae0565b610057565b604051901515815260200160405180910390f35b6000806100626101b9565b9050600061007087876101ce565b604083015190915084146100b0576040517ffa06659300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100c28287878660400151610b72565b90506101108686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050506060830151608084015186516040870151610c4d565b61018082015260006101228383610d11565b90508061015b576040517f9fc3a21800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610168848685610deb565b9050806101a1576040517fa5d82e8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8180156101ab5750805b9a9950505050505050505050565b6101c1615253565b6101c96118f5565b905090565b6101d661560a565b6101de61560a565b6101ec602060008587615bb3565b6101f591615bdd565b8152610205604060208587615bb3565b61020e91615bdd565b6020820152610221606060408587615bb3565b61022a91615bdd565b6040808301919091528051608080820190925290819061024d9060608789615bb3565b61025691615bdd565b815260200161026960a060808789615bb3565b61027291615bdd565b815260200161028560c060a08789615bb3565b61028e91615bdd565b81526020016102a160e060c08789615bb3565b6102aa91615bdd565b905260608201526040805160808101909152806102cc61010060e08789615bb3565b6102d591615bdd565b81526020016102ea6101206101008789615bb3565b6102f391615bdd565b81526020016103086101406101208789615bb3565b61031191615bdd565b81526020016103266101606101408789615bb3565b61032f91615bdd565b9052608080830191909152604080519182019052806103546101806101608789615bb3565b61035d91615bdd565b81526020016103726101a06101808789615bb3565b61037b91615bdd565b81526020016103906101c06101a08789615bb3565b61039991615bdd565b81526020016103ae6101e06101c08789615bb3565b6103b791615bdd565b905260a08201526040805160808101909152806103da6102006101e08789615bb3565b6103e391615bdd565b81526020016103f86102206102008789615bb3565b61040191615bdd565b81526020016104166102406102208789615bb3565b61041f91615bdd565b81526020016104346102606102408789615bb3565b61043d91615bdd565b90526101008201526040805160808101909152806104616102806102608789615bb3565b61046a91615bdd565b815260200161047f6102a06102808789615bb3565b61048891615bdd565b815260200161049d6102c06102a08789615bb3565b6104a691615bdd565b81526020016104bb6102e06102c08789615bb3565b6104c491615bdd565b90526101208201526040805160808101909152806104e86103006102e08789615bb3565b6104f191615bdd565b81526020016105066103206103008789615bb3565b61050f91615bdd565b81526020016105246103406103208789615bb3565b61052d91615bdd565b81526020016105426103606103408789615bb3565b61054b91615bdd565b905260c082015260408051608081019091528061056e6103806103608789615bb3565b61057791615bdd565b815260200161058c6103a06103808789615bb3565b61059591615bdd565b81526020016105aa6103c06103a08789615bb3565b6105b391615bdd565b81526020016105c86103e06103c08789615bb3565b6105d191615bdd565b90526101408201526040805160808101909152806105f56104006103e08789615bb3565b6105fe91615bdd565b81526020016106136104206104008789615bb3565b61061c91615bdd565b81526020016106316104406104208789615bb3565b61063a91615bdd565b815260200161064f6104606104408789615bb3565b61065891615bdd565b905260e082015261046060005b601c81101561072a576000600861067d836020615c48565b6106879190615c48565b6106919084615c5f565b905060005b60088110156107205760006106ac826020615c48565b6106b69084615c5f565b905060006106c5826020615c5f565b90506106e46106d682848c8e615bb3565b6106df91615bdd565b6121d9565b87610160015186601c81106106fb576106fb615c72565b6020020151846008811061071157610711615c72565b60200201525050600101610696565b5050600101610665565b506107376008601c615c48565b610742906020615c48565b61074c9082615c5f565b905060005b602c8110156107b7576000610767826020615c48565b6107719084615c5f565b90506000610780826020615c5f565b90506107916106d682848a8c615bb3565b85610180015184602c81106107a8576107a8615c72565b60200201525050600101610751565b506107c4602c6020615c48565b6107ce9082615c5f565b905060005b6107df6001601c615ca1565b8110156108ff5760006107f3826080615c48565b6107fd9084615c5f565b9050600061080c826020615c5f565b905080600061081c826020615c5f565b905080600061082c826020615c5f565b905080600061083c826020615c5f565b905060405180608001604052808f8f8b908b9261085b93929190615bb3565b61086491615bdd565b60001c81526020018f8f8990899261087e93929190615bb3565b61088791615bdd565b60001c81526020018f8f879087926108a193929190615bb3565b6108aa91615bdd565b60001c81526020018f8f859085926108c493929190615bb3565b6108cd91615bdd565b90526101a08c01518a601b81106108e6576108e6615c72565b60200201525050600190960195506107d3945050505050565b5061090c6001601c615ca1565b610917906080615c48565b6109219082615c5f565b905060005b601c81101561098c57600061093c826020615c48565b6109469084615c5f565b90506000610955826020615c5f565b90506109666106d682848a8c615bb3565b856101c0015184601c811061097d5761097d615c72565b60200201525050600101610926565b50610999601c6020615c48565b6109a39082615c5f565b90506040518060800160405280868684908560206109c19190615c5f565b926109ce93929190615bb3565b6109d791615bdd565b60001c815260200186868460206109ee9190615c5f565b906109fa866040615c5f565b92610a0793929190615bb3565b610a1091615bdd565b81526020018686610a22856040615c5f565b90610a2e866060615c5f565b92610a3b93929190615bb3565b610a4491615bdd565b81526020018686610a56856060615c5f565b90610a62866080615c5f565b92610a6f93929190615bb3565b610a7891615bdd565b90526101e0830152610a8b816080615c5f565b9050604051806080016040528086868490856020610aa99190615c5f565b92610ab693929190615bb3565b610abf91615bdd565b60001c81526020018686846020610ad69190615c5f565b90610ae2866040615c5f565b92610aef93929190615bb3565b610af891615bdd565b81526020018686610b0a856040615c5f565b90610b16866060615c5f565b92610b2393929190615bb3565b610b2c91615bdd565b81526020018686610b3e856060615c5f565b90610b4a866080615c5f565b92610b5793929190615bb3565b610b6091615bdd565b90526102008301525090505b92915050565b610b7a61583a565b6000610b8886868686612205565b604086019190915260208501919091529083529050610ba7818761265c565b608085019190915260608401919091529050610bc38187612731565b60a08401919091529050610bd6816128b1565b60c08401919091529050610bea8682612914565b60e08401919091529050610bfe86826129eb565b6101008401919091529050610c138682612a79565b6101208401919091529050610c288682612be9565b6101408401919091529050610c3d8682612c5d565b5061016083015250949350505050565b600060018082610c7287610c6d8a610c686106df8a8c615c5f565b612cb5565b612ce2565b90506000610c9188610c8c8b610c686106df8b6001615c5f565b612d0f565b905060005b6043811015610d06576000610cc38c8381518110610cb657610cb6615c72565b60200260200101516121d9565b9050610cd386610c688684612ce2565b9550610ce385610c688584612ce2565b9450610cef848c612ce2565b9350610cfb838c612d0f565b925050600101610c96565b506101ab8484612d65565b6000806001815b6012811015610dcd57600086610160015182601c8110610d3a57610d3a615c72565b602002015190506000610d4d8286612d7b565b905080610d86576040517f9fc3a21800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008760e0015184601c8110610d9e57610d9e615c72565b60200201519050610daf8382612d9f565b9550610dbd88868387612fc1565b9450505050806001019050610d18565b506000610ddb868684612ffe565b90508281145b9695505050505050565b6000610e1f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000610e2f846101200151613078565b9050610e396158b4565b610e416158d3565b6000610e4d87856130dd565b8051610140890151919250610e6e91610c6d908460015b6020020151612cb5565b8552610120870151610e9c90610e8390613170565b82516101408a0151610c689190610c8c90866001610e64565b602086810191909152600184526101e08a015160408051808201825260008082529084015280518082018252828401518351608891821b178252606084015192909301519190921b17918101919091528252600160608601819052600060808701525b60238111610fa557610f21610f178760000151613204565b8760600151612cb5565b8482604a8110610f3357610f33615c72565b602002015260808601516101808b0151610f769190610c6d90610f57600186615ca1565b602c8110610f6757610f67615c72565b60200201518960600151612cb5565b60808701526060860151610100890151610f909190612cb5565b6060870152610f9e81615cb4565b9050610eff565b506000610fb460236001615c5f565b90505b602c811161103457610fcf610f178760200151613204565b8482604a8110610fe157610fe1615c72565b602002015260808601516101808b01516110059190610c6d90610f57600186615ca1565b6080870152606086015161010089015161101f9190612cb5565b606087015261102d81615cb4565b9050610fb7565b50606088015182600160200201526080880151826002602002015260a0880151826003602002015260c0880151826004602002015260e08801518260056020020152610100880151826006602002015261012088015182600760200201526101408801518260086020020152610180880151826009602002015261016088015182600a60200201526101a088015182600b60200201526101c088015182600c60200201526101e088015182600d602002015261020088015182600e602002015261022088015182600f60200201526102408801518260106020020152610260880151826011602002015261028088015182601260200201526102a088015182601360200201526102c088015182601460200201526102e08801518260156020020152610300880151826016602002015261032088015182601760200201526103408801518260186020020152610360880151826019602002015261038088015182601a60200201526103a088015182601b602002015260608901516111ff906040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b6103808301526080890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103a083015260a0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103c083015260c0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526103e083015260e0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610400830152610140890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610420830152610100890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610440830152610120890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b909117908201526104608301526103008801516104808301526103208801516104a08301526103408801516104c08301526103608801516104e0830152606089810151604080518082018252600080825260209182015281518083018352818401518451608891821b1782529484015192909301519190931b17918101919091526105008301526080890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261052083015260a0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261054083015260c0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b9091179082015261056083015260e0890151604080518082018252600080825260209182015281518083018352818401518451608891821b178252606085015193909401519290931b90911790820152610580830152600060408601526101408701516115bb90613230565b606086015260005b6115cf6001601c615ca1565b81101561173f5760006115e460016012615ca1565b821015905060008161164e5760608801516116159085611605866002615c5f565b601d8110610e6457610e64615c72565b905061162081613204565b868461162e602c6001615c5f565b6116389190615c5f565b604a811061164857611648615c72565b60200201525b61167d8860400151610c6d838f6101c0015187600161166d9190615c5f565b601c8110610e6457610e64615c72565b604089015260608801516101408b01516116979190612cb5565b60608901526101a08c01516117089084601b81106116b7576116b7615c72565b60200201516040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b8584611716602c6001615c5f565b6117209190615c5f565b604a811061173057611730615c72565b602002015250506001016115c3565b5060006117578887608001518c6101c001518861323c565b604087015190915061176f90610c6d83856000610e64565b604087018190526101c08b0151516101408a015161179e9291610c6d916117969190612cb5565b856001610e64565b60408088019190915280518082019091526001815260026020820152836117c7601c602c615c5f565b604a81106117d7576117d7615c72565b60200201526040860151846117ee601c602c615c5f565b604a81106117fe576117fe615c72565b60200201526102008a015160009061185c906040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b9050808461186c601c602c615c5f565b611877906001615c5f565b604a811061188757611887615c72565b60200201526101608901518561189f601c602c615c5f565b6118aa906001615c5f565b604a81106118ba576118ba615c72565b602002015260006118cb8587613341565b905060006118d883613414565b90506118e4828261348c565b9d9c50505050505050505050505050565b6118fd615253565b50604080516103c0810182526204000081526012602080830191909152604382840152825180840184526000808252818301526060830152825180840184527e23296072ba882e23ed90ee1dac8eedbb30e5b4fbbf6a8be14cc97eaa44669381527f1540513d0b8971ae7c56b28838a830801b04cc4f3a3dde06c3eac3410a2ee9c4818301526080830152825180840184527f128f4689193e8d7e352ac5f0afe29ff277d1b8b08807981784a590b82a9b5e2e81527f1aa8be7d44f5bf4c12440bd390aeb102e211af54f0c176e5a7aaecdf495435748183015260a0830152825180840184527f2b0a33558c2603b6bc43635665be9da0f5e2f623bea9e22dd055c74324d7f12281527f162d39578897a70f2dc851710de29d3dd6fae4e768f2c841aa7b95834ceae5cb8183015260c0830152825180840184527f262d979b29df1669541daa3f02157701ff7ab07a6f5317d2e4d1c4c2106e17e381527f06af46ef2dc4282de259c7e02867c3c77a799af864e2370f61a8f1aec7a7f4098183015260e0830152825180840184527f0e45f7edf0975574a0234a5c0510af9251c52534b527f8af7bd17a4c6095909681527f2053c39f8961e378924eb488270ae9caab9db0bbf2d2937c0fef89a40000d21481830152610100830152825180840184527f24792fa51f5beafb9c4eff1a8bf1a9a6ccd9a02877d64ec78becc03bc9f7d1ff81527f2b3a9b5ddd9cf49b41974c5cb73e39997fd915a8df5b8458fa08d02a55a9644381830152610120830152825180840184527f1df1862c3cd967cf4e80a289e6fec969049ae11aac5a796ac650315d22e580fb81527f2afb83456939046324306525332ef3307638d6766ff90e40559aa45e471b871b81830152610140830152825180840184527f1c2f84adf95896cf0018ae79ebbdeb2468b1404953a855ec2facc4b49449543381527f0a175b5ba1452877e6cb7ac6ca850788f7e17a56f310cb5f18d9642b7bdcbcf281830152610160830152825180840184527f286ee766413caa93518a7570875801a9159d2e1315c1ab5bc9e52595a830c49581527f045175bd839a41eda5e9b6a40f76bbbf2723a68e1e7ecd739bd97ae093cd652881830152610180830152825180840184527f22ffd03e53836f0a9271398e34a792953979926b49a76c967c71cc8af35e04bb81527f02e2ae071779429f971820e5d680764ae55b0a0db4bc14709d47abc261cfe64c818301526101a0830152825180840184527f034ab86a5bccfa4f69637da232ba777f403c1aeb69ad6040d432a795e1b382c281527f09a353e2a34ad0af28688dbf4c01cc7de2c9878d6a1b80ce58e567d6c48b5bec818301526101c0830152825180840184527f1a65519a1ab82173d9cb9dc061f62c9d53ef95915b0cc76feb9feb90351e810d81527f29c0afd9c7eeae8e1635b3835090d59d5344bd56cf3c71487adcf6d8c5844348818301526101e0830152825180840184527f139c2f5bba86aea351df6608e3f1cd26b3c0b4371dca357e701a6025f94be1e781527f22399eb57ad19a4409a194335726da4d76a0cf2d0d89a50dbc7f687de1aad8c381830152610200830152825180840184527f0ff16a5ae01ecffc7815eb75c174ad14281aa49059929907518634d841c628f581527f2d867f1d311969273bc82b184e63d9269b182a881d3b302b242a4dc93462f7b781830152610220830152825180840184527f0821760c77fc15784afcaff815f73f8f90aa38ebe34d3b48695e3a6ad08ed8b081527f2f51bc8941e5c577f7ec1d5bb038bd902c7a5c7dd1389bab38b9c89ec4ab7d2981830152610240830152825180840184527f0ffd51787978d66be3b7e70e810c4575178c9f45674db1b870595ce7e2fb5f6f81527f17a63d56e53061da2fe13b311859cb536d18d6060100c393c5bb9251dfbad74a81830152610260830152825180840184527f024dcf715a66fd964f629553ae2bcb51c127b813ed7f9a4b28b481fb9e2c377281527f20244a5d7222400941070d0355a58d34ab8ff9b0d8935fd8c9225059f13fcaac81830152610280830152825180840184527f02987fe7cdb3cab8ebf18ecc8711b792828a0670bd9bcd17442c4a157325c8ef81527f1c9fa626c623b3102d77b2878a9de76dd9a1837521baa49c6874797a8e5a9626818301526102a0830152825180840184527f130b070560870337eb165683645e3c8522d6449e1367a35c5cf00dd4462fd96781527f01fe23c3926178b337c362c53b74d2233d08cf587bb0f114ebfe21542c9645e5818301526102c0830152825180840184527f153a7f8639e06461474e00018cde1ac1acf38089893c5515de20804922c0321981527f0939c3d22ab03cefb504fe214af93d65912ae3750ce6b756b0e02c9ce7a16e68818301526102e0830152825180840184527f234c57b9aab8dfb66855cbb2ed5c7dcaa724527a8b5abae05dbfc771da6679cc81527f22060d556338e2843aed696c8fc98bf0c6d133543b5c8774daf51221e0eafb4481830152610300830152825180840184527f2c931d2ddd0a37bf249ba13d4c0005dcf10f905b44f587692f7e19c4325beece81527f02d3dc1f3ed31519bae6c333e090615800a04cfdc9d6233f823114a44746d50181830152610320830152825180840184527f06246fd4811f690574ddc55745590439a8f73455e78fdd3521d65c7e007e6b4581527f1e132a30f5aa1d892595234280dd91b7728b3dadc7b72e58f2a95148f38ba21081830152610340830152825180840184527f1e0181f12b41a00b4ee891ed5a942bfdbae834b4faf95ce9e9aaa9bd2500ce6381527f1b6f032aa6b07625de54649d25628c9a5c45ab7c6c13a88fdd31ca7ecce024af81830152610360830152825180840184527f19b09aa2fcb34ae480845aa4ad56e01616ae845300e6f676fdb84f4bd396851b81527f295d8a6bfcce573b23d5eefd0aab6d32479423acd4956ce6deb5a67073f032d58183015261038083015282518084019093527f08d314a75c6b1f82d70f2edc7b7bf6e7397bc04bc6aaa0584b9e5bbb7689082b83527f0100000000000000000000000000000000000000000000000000000000000000908301526103a081019190915290565b6000610b6c7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183615d1b565b600080808080612216866003615c5f565b61222190600c615c5f565b67ffffffffffffffff81111561223957612239615d2f565b604051908082528060200260200182016040528015612262578160200160208202803683370190505b509050886000015160001b8160008151811061228057612280615c72565b602002602001018181525050886020015160001b816001815181106122a7576122a7615c72565b602002602001018181525050886040015160001b816002815181106122ce576122ce615c72565b60200260200101818152505060005b8681101561232f578888828181106122f7576122f7615c72565b905060200201358282600361230c9190615c5f565b8151811061231c5761231c615c72565b60209081029190910101526001016122dd565b5060608901515181612342886003615c5f565b8151811061235257612352615c72565b60209081029190910181019190915260608a0151015181612374886003615c5f565b61237f906001615c5f565b8151811061238f5761238f615c72565b6020908102919091010152606089015160400151816123af886003615c5f565b6123ba906002615c5f565b815181106123ca576123ca615c72565b60209081029190910101526060808a01510151816123e9886003615c5f565b6123f4906003615c5f565b8151811061240457612404615c72565b602090810291909101015260808901515181612421886003615c5f565b61242c906004615c5f565b8151811061243c5761243c615c72565b60209081029190910181019190915260808a015101518161245e886003615c5f565b612469906005615c5f565b8151811061247957612479615c72565b602090810291909101015260808901516040015181612499886003615c5f565b6124a4906006615c5f565b815181106124b4576124b4615c72565b6020908102919091010152608089015160600151816124d4886003615c5f565b6124df906007615c5f565b815181106124ef576124ef615c72565b602090810291909101015260a0890151518161250c886003615c5f565b612517906008615c5f565b8151811061252757612527615c72565b60209081029190910181019190915260a08a0151015181612549886003615c5f565b612554906009615c5f565b8151811061256457612564615c72565b602090810291909101015260a08901516040015181612584886003615c5f565b61258f90600a615c5f565b8151811061259f5761259f615c72565b602090810291909101015260a089015160600151816125bf886003615c5f565b6125ca90600b615c5f565b815181106125da576125da615c72565b602002602001018181525050612615816040516020016125fa9190615d5e565b604051602081830303815290604052805190602001206121d9565b9150612620826136a0565b604080516020810186905292975090955061263b91016125fa565b91506000612648836136a0565b50959a949950949750909550919350505050565b600080600061266961590d565b8581526101008581018051516020808501919091528151810151604080860191909152825181015160608087019190915292518301516080860152610120808a0180515160a0880152805184015160c080890191909152815184015160e089015290518501519587019590955293890180515194860194909452835182015161014086015283518101516101608601529251909101516101808401529051612717916125fa91849101615d94565b9150612722826136a0565b90979096509194509092505050565b61273961592c565b600061274361594b565b8481526101408401805151602080840191909152815181015160408085019190915282518101516060808601919091529251830151608085015260e080880180515160a0870152805184015160c0870152805183015191860191909152519092015161010084015290516127bd916125fa91849101615dc9565b91506127c8826136a0565b6020850152835260015b6127de60026019615dfe565b81101561285e576127fb836040516020016125fa91815260200190565b9250612806836136a0565b85612812846002615c48565b6019811061282257612822615c72565b6020020186612832856002615c48565b61283d906001615c5f565b6019811061284d5761284d615c72565b6020020191909152526001016127d2565b50612875826040516020016125fa91815260200190565b91506000612882836136a0565b8561288f60016019615ca1565b6019811061289f5761289f615c72565b60200201919091525050509250929050565b6128b961596a565b6000805b601c81101561290d576128dc846040516020016125fa91815260200190565b935060006128e9856136a0565b8584601c81106128fb576128fb615c72565b602002019190915250506001016128bd565b5090929050565b61291c61596a565b6000805b601c8110156129e25761293161594b565b84815260005b600881101561299b5786610160015183601c811061295757612957615c72565b6020020151816008811061296d5761296d615c72565b60200201518261297e836001615c5f565b6009811061298e5761298e615c72565b6020020152600101612937565b506129b0816040516020016125fa9190615dc9565b945060006129bd866136a0565b8685601c81106129cf576129cf615c72565b6020020191909152505050600101612920565b50909391925050565b6000806129f6615989565b83815260005b602c811015612a4a5785610180015181602c8110612a1c57612a1c615c72565b602002015182612a2d836001615c5f565b602d8110612a3d57612a3d615c72565b60200201526001016129fc565b50612a5f816040516020016125fa9190615e12565b91506000612a6c836136a0565b5096929550919350505050565b600080612a846159a8565b83815260005b612a966001601c615ca1565b811015612bd457856101a0015181601b8110612ab457612ab4615c72565b60200201515182612ac6836004615c48565b612ad1906001615c5f565b606d8110612ae157612ae1615c72565b60200201526101a086015181601b8110612afd57612afd615c72565b60200201516020015182826004612b149190615c48565b612b1f906002615c5f565b606d8110612b2f57612b2f615c72565b60200201526101a086015181601b8110612b4b57612b4b615c72565b60200201516040015182612b60836004615c48565b612b6b906003615c5f565b606d8110612b7b57612b7b615c72565b60200201526101a086015181601b8110612b9757612b97615c72565b60200201516060015182612bac836004615c48565b612bb7906004615c5f565b606d8110612bc757612bc7615c72565b6020020152600101612a8a565b50612a5f816040516020016125fa9190615e47565b600080612bf46159c7565b83815260005b601c811015612c4857856101c0015181601c8110612c1a57612c1a615c72565b602002015182612c2b836001615c5f565b601d8110612c3b57612c3b615c72565b6020020152600101612bfa565b50612a5f816040516020016125fa9190615e7c565b600080612c686159e6565b8381526101e085018051516020808401919091528151810151604080850191909152825181015160608086019190915292519092015160808401529051612a5f916125fa91849101615eb1565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284099392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284089392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612d5c837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b84089392505050565b6000612d7483610c6884613170565b9392505050565b81516000908190612d94908560015b6020020151612ce2565b929092149392505050565b6000806040518061010001604052807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec5181526020016102d081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff118152602001609081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71815260200160f081526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd3181526020016113b081525090506000604051806101000160405280600081526020016001815260200160028152602001600381526020016004815260200160058152602001600681526020016007815250905060006001905060005b6008811015612ed457612eca82610c688884612d0f565b9150600101612eb3565b50612edd615a04565b60005b6008811015612f56576000858260088110612efd57612efd615c72565b60200201519050612f2881610c688a888660088110612f1e57612f1e615c72565b6020020151612d0f565b9050612f3381613170565b905080838360088110612f4857612f48615c72565b602002015250600101612ee0565b5060005b6008811015612fab576000888260088110612f7757612f77615c72565b60200201519050612f9481848460088110610e6457610e64615c72565b9050612fa08782612ce2565b965050600101612f5a565b50612fb68583612cb5565b979650505050505050565b600080612ff26001610c6d86610c688a60c0015188601c8110612fe657612fe6615c72565b60200201516001612d0f565b9050610de18582612cb5565b61018083015160009061300f615a23565b61301a8282866136da565b6130268286838761388b565b61303282868387613a79565b61303d828286613c80565b613048828286613e72565b613054828683876141d1565b61305f828286614ade565b61306a828286614eba565b610de1818660a001516151bc565b61308061596a565b81815260015b601c8110156130d7576130b88261309e600184615ca1565b601c81106130ae576130ae615c72565b6020020151613230565b8282601c81106130ca576130ca615c72565b6020020152600101613086565b50919050565b6130e56159c7565b6101608301516130ff6130fa82856000612f1e565b613170565b825260005b601c81101561316857600061311b60126001615c5f565b821161313d5761313a6130fa848785601c8110612d8a57612d8a615c72565b90505b808461314a846001615c5f565b601d811061315a5761315a615c72565b602002015250600101613104565b505092915050565b6000808290506000604051602081526020808201526020604082015282606082015260027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360808201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08201526020600060c08360055afa9050806131f857600080fd5b50506000519392505050565b6000610b6c827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b6000610b6c8283612cb5565b6000601c5b801561333757600083613255600184615ca1565b601c811061326557613265615c72565b6020020151905060008760e001516001846132809190615ca1565b601c811061329057613290615c72565b602002015190506000866132a5600186615ca1565b601c81106132b5576132b5615c72565b6020020151905060006132f16132d56132ce868c612cb5565b6002612cb5565b610c8c84610c686132eb89610c6860018b612d0f565b88612d0f565b905061331281610c686130fa61330c88610c6860018a612d0f565b87612ce2565b90506012851180613321578199505b50505050508061333090615ee5565b9050613241565b5092949350505050565b60408051808201909152600080825260208201526000613363601c602c615c5f565b61336e906002615c5f565b90506001604051855151604082015285516020015160608201528451608082015260408160606040840160075afa8216915060015b838110156133fc5760208102870160208202870181515160408501528151602001516060850152805160808501525050604080830160606040850160075afa8316925060408260808460065afa909216916001016133a3565b50805184526020810151602085015250505092915050565b60408051808201909152600080825260208201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476134799190615ca1565b6134839190615d1b565b60208301525090565b81516020808401518351848301516040805194850195909552938301919091527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260608301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60808301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c083015260e08201526101008101919091527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16101208201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06101408201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46101608201527f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e5561018082015260009081906101a0016040516020818303038152906040529050600080600873ffffffffffffffffffffffffffffffffffffffff16836040516136319190615f1a565b600060405180830381855afa9150503d806000811461366c576040519150601f19603f3d011682016040523d82523d6000602084013e613671565b606091505b509150915060008180602001905181019061368c9190615f49565b9050828015612fb657509695505050505050565b600080826fffffffffffffffffffffffffffffffff8116608082901c6136c5826121d9565b94506136d0816121d9565b9350505050915091565b60006136e7846006615222565b90507f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000600061374a61374461371d856003612d0f565b610c6861373961372e8b6000615222565b610c688c601c615222565b610c688b601b615222565b83612cb5565b90506137cb6137c06137a761378e61377585610c6d61376a8d6002615222565b610c688e601b615222565b610c6d6137838c6003615222565b610c688d601c615222565b610c6d61379c8b6004615222565b610c688c601d615222565b610c6d6137b58a6005615222565b610c688b601e615222565b610c6d886001615222565b90506137ea81610c6d6137df866001612d0f565b610c688a602a615222565b90506137f68184612cb5565b90506138028185612cb5565b8552506000905061383e61383361382861381d88601b615222565b610c6d89601e615222565b610c8c886027615222565b610c6d876000615222565b905061384f81610c68846002612d0f565b905061386081610c68846001612d0f565b905061386c8183612cb5565b90506138788184612cb5565b9050808460015b60200201525050505050565b60008060006138c36138b96138a189601b615222565b610c6d6138af8b6011615222565b8a60600151612cb5565b8760800151612ce2565b90506138fc81610c686138f26138da8b601c615222565b610c6d6138e88d6012615222565b8c60600151612cb5565b8960800151612ce2565b905061392181610c686138f26139138b601d615222565b610c6d6138e88d6013615222565b905061394681610c686138f26139388b601e615222565b610c6d6138e88d6014615222565b92506000905061396b6138b961395d89601b615222565b610c6d6138af8b600d615222565b905061399081610c686138f26139828b601c615222565b610c6d6138e88d600e615222565b90506139b581610c686138f26139a78b601d615222565b610c6d6138e88d600f615222565b90506139da81610c686138f26139cc8b601e615222565b610c6d6138e88d6010615222565b915060009050613a026139fc6139f189601f615222565b610c6d8a6019615222565b84612cb5565b9050613a3881610c8c613a32613a198b602b615222565b610c6d613a278d601a615222565b8c6101800151612cb5565b85612cb5565b9050613a448185612cb5565b6040860152506000613a68613a32613a5d89601a615222565b610c688a602b615222565b606090950194909452505050505050565b600080613ad8613ac0613aa8613a936138f28a6015615222565b610c6d613aa18b6016615222565b8a51612cb5565b610c6d613ab68a6017615222565b8960200151612cb5565b610c6d613ace896018615222565b8860400151612cb5565b91506000613b10613af7613aed89601b615222565b8860800151612ce2565b610c6d613b058a6003615222565b610c688b6027615222565b90506000613b3b613b2289601c615222565b610c6d613b308b6000615222565b610c688c6028615222565b90506000613b66613b4d8a601d615222565b610c6d613b5b8c6001615222565b610c688d6029615222565b9050613ba6613b8e613b8085610c6d868d60000151612cb5565b610c6d848c60200151612cb5565b610c6d613b9c8c6004615222565b8b60400151612cb5565b93505050506000613bbb6139fc886020615222565b90506000613bcd6139fc896020615222565b90506000613c06613bed613be28b6022615222565b610c6d8c600a615222565b610c8c613bfb8c6022615222565b610c688d600a615222565b90506000613c2b613c25613c1a8789612cb5565b610c688d6020615222565b83612d0f565b9050613c378188612cb5565b90506000613c60613c52613c4c8d600a615222565b87612cb5565b610c8c613c4c8e6021615222565b60808a018390529050808960055b60200201525050505050505050505050565b6000613c8e60006001612d0f565b90506000613c9e60006002612d0f565b90506000613cae60006003612d0f565b90506000613ccb613cc088601c615222565b610c8c89601b615222565b90506000613ce8613cdd89601d615222565b610c8c8a601c615222565b90506000613d05613cfa8a601e615222565b610c8c8b601d615222565b90506000613d22613d178b6027615222565b610c8c8c601e615222565b905083613d3381610c68818b612ce2565b9050613d4381610c68878a612ce2565b9050613d5381610c688789612ce2565b9050613d6481610c688d6007615222565b9050613d70818a612cb5565b60c08b01525082613d8581610c68818b612ce2565b9050613d9581610c68868a612ce2565b9050613da581610c688689612ce2565b9050613db681610c688d6007615222565b9050613dc2818a612cb5565b60e08b01525081613dd781610c68818b612ce2565b9050613de781610c68858a612ce2565b9050613df781610c688589612ce2565b9050613e0881610c688d6007615222565b9050613e14818a612cb5565b6101008b01525080613e2a81610c68818b612ce2565b9050613e3a81610c68848a612ce2565b9050613e4a81610c688489612ce2565b9050613e5b81610c688d6007615222565b9050613e67818a612cb5565b9050808a6009613c6e565b613eb26040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b613ebd84601c615222565b8152613eca84601d615222565b6020820152613eda846027615222565b6040820152613eea84602a615222565b6060820152613efa846029615222565b6080820152613f0a846028615222565b60a08201526000613f1c856002615222565b90506000613f2b866000615222565b90506000613f4184604001518560000151612d0f565b90506000613f5785602001518660200151612cb5565b60608601519091508690600090613f6e9080612cb5565b90506000613f8d613f8789602001518a60600151612cb5565b88612cb5565b90506000613fad613fa68a60a001518b60400151612ce2565b8a51612ce2565b9050613fbc613c4c8288612cb5565b9050613fdd613fd7613fd16132eb8487612d0f565b84612ce2565b83612ce2565b9050614005613ffa613fef8387612cb5565b610c688f6008615222565b610c6860018a612d0f565b6101408c0152505050506020850151608086015160009161402591612ce2565b9050600061404461403a886060015188612cb5565b8860200151612d0f565b9050600061406a6140558487612cb5565b610c6d613a328b60a001518c60000151612d0f565b905061409261408761407c838c612cb5565b610c688e6008615222565b610c68600189612d0f565b6101608b015250600091506140b490506140ad836011612ce2565b8751612cb5565b905060006140c28384612ce2565b90506140ce8182612ce2565b905060006140dd836009612cb5565b90506141076141016139fc6140fa8b60a001518c60000151612ce2565b8b51612ce2565b82612d0f565b60c0890181905260009061412390613f8790613fef908d612cb5565b90506141368b600a602002015182612ce2565b6101408c0152505086516000925061415e91506140ad906141579080612ce2565b8851612ce2565b905060006141a061417b83610c688a600001518b60a00151612d0f565b6020890151610c8c9061418e9080612ce2565b610c688b602001518c60800151612ce2565b90506141bd89600b6020020151610c6d613f87613fef858d612cb5565b89600b602002015250505050505050505050565b61427b604051806102c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6142b061429761428c87601b615222565b610c68886028615222565b610c6d6142a5886027615222565b610c6889601c615222565b81526142f56142ea6142d16142c688601b615222565b610c6889601e615222565b610c6d6142df89601c615222565b610c688a601d615222565b610c8c876029615222565b6040820181905261430f9068100000000000000000612cb5565b6040820181905261432590610c8c87602a615222565b6040820181905281516143389190612ce2565b6040820181905261434e90610c68876005615222565b604082015280516143689068100000000000000000612cb5565b80825261438890610c6d61437d886027615222565b610c68896028615222565b808252602082018190526143a490610c8c61381d88601d615222565b602082018190526143ba90610c68876004615222565b60208201528051606082018190526143d790610c6d87601e615222565b606082018190526143fb90610c8c6143f0886029615222565b610c6d89602a615222565b6060820181905261441190610c68876000615222565b816060018181525050600061443b61443183602001518460400151612ce2565b8360600151612ce2565b905061444c81610c68886003615222565b905061446461445c876028615222565b614000612cb5565b6080830181905261447a90610c6d886027615222565b6080830181905261448d90614000612cb5565b608083018190526144a390610c6d88601d615222565b608083018190526144b690614000612cb5565b608083018190526144cc90610c6d88601c615222565b608083018190526144df90614000612cb5565b608083018190526144f590610c6d88601b615222565b6080830181905261450b90610c8c88601e615222565b6080830181905261452190610c68886005615222565b608083015261453461445c876029615222565b60a0830181905261454a90610c6d886028615222565b60a0830181905261455d90614000612cb5565b60a0830181905261457390610c6d886027615222565b60a0830181905261458690614000612cb5565b60a0830181905261459c90610c6d88601e615222565b60a083018190526145af90614000612cb5565b60a083018190526145c590610c6d88601d615222565b60a083018190526145db90610c8c88602a615222565b60a083018190526145f190610c68886000615222565b60a08301819052608083015160009161460a9190612ce2565b905061461b81610c68896004615222565b905061463561462b88601d615222565b8760400151612cb5565b60c0840181905261464e90610c6d613ab68a601c615222565b60c0840181905261466e90610c6d6146678a601b615222565b8951612cb5565b60c0840181905261468490610c6d896001615222565b60c0840181905260e084018190526146a190610c8c89601e615222565b60c08401526146b4613cc0886027615222565b6101408401526146d36146c888602a615222565b610c8c89601e615222565b6101208401526101408301516146f8906146ed9080612cb5565b846101400151612d0f565b61028084015261014083015161474d906147429061473b90610c6860017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b6001612ce2565b846101200151612cb5565b61016084018190526147849061477690610c6861476b8b6002615222565b610c688c6003615222565b610c68613c4c8a6009615222565b6101a08601526102808301516147a69061477690610c6861476b8b6002615222565b6101c086015260c08301516147ce90610c686147c38a6002615222565b610c688b6003615222565b6101e084015260006147ee6147e489601e615222565b8560e00151612d0f565b90506147fd6141018283612cb5565b6101a0850152614811613ace896029615222565b610100850181905261483590610c6d61482b8b6028615222565b8a60200151612cb5565b610100850181905261484f90610c6d613aa18b6027615222565b61010085015261486e61486389602a615222565b856101000151612d0f565b6101008501526000614884613cfa8a6029615222565b90506148fe6148c561374461473b88610140015160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610c689190615ca1565b610c6861473b88610100015160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610c689190615ca1565b610180860152610100850151614923906149189080612cb5565b866101000151612d0f565b6101c08601526101808501516149569061494290610c688c6006615222565b610c686149508c6009615222565b89612cb5565b6101e08801526102808501516149759061494290610c688c6006615222565b6102008801526101c08501516149949061494290610c688c6006615222565b6102208801526101a08501516149af90610c688b6006615222565b6102008601526149ce6149c38a6028615222565b610c8c8b601c615222565b610220860152610140850151614a2090613cfa90614a159061473b90610c6860017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001615ca1565b876102200151612cb5565b61024086018190526101e08601516102608701819052614a5791610c6d90610c68614a4c8e6005615222565b610c688f6002615222565b610260860181905260c0860151614a7b9190610c6d90610c68614a4c8e6000615222565b6102608601819052610200860151614a939190612ce2565b6102608601819052614aa990613fd19086612ce2565b6102a08601819052614ac390610c686149508c6009615222565b6102a0860181905287600c6020020152505050505050505050565b614b6560405180610220016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b614b7e614b7385601b615222565b610c6d866002615222565b8152614b99614b8e85601c615222565b610c6d866003615222565b6020820152614bb7614bac85601d615222565b610c6d866004615222565b6040820152614bd5614bca85601e615222565b610c6d866005615222565b60608201528051614c0790614c0090614bf990614bf29080612cb5565b8451612cb5565b8351612cb5565b8251612cb5565b60808201526020810151614c4590614c3b90614c3190614c279080612cb5565b8460200151612cb5565b8360200151612cb5565b8260200151612cb5565b60a08201526040810151614c8390614c7990614c6f90614c659080612cb5565b8460400151612cb5565b8360400151612cb5565b8260400151612cb5565b60c08201526060810151614cc190614cb790614cad90614ca39080612cb5565b8460600151612cb5565b8360600151612cb5565b8260600151612cb5565b60e0820152608081015160a0820151614cda9190612ce2565b61010082015260c081015160e0820151614cf49190612ce2565b61012082015260a0810151614d1890614d0d9080612ce2565b826101200151612ce2565b61014082015260e0810151614d3c90614d319080612ce2565b826101000151612ce2565b610160820152610120810151614d529080612ce2565b6101e08201819052614d7390614d689080612ce2565b826101600151612ce2565b6101e0820152610100810151614d899080612ce2565b6101a08201819052614daa90614d9f9080612ce2565b826101400151612ce2565b6101a08201819052610160820151614dc191612ce2565b6101808201526101408101516101e0820151614ddd9190612ce2565b6101c0820152614df161374485600b615222565b6102008201819052610240840151610180830151614e1c92610c6d91610c6890610c8c8a6027615222565b8360126020020152614e4c8360136020020151610c6d836102000151610c68856101a00151610c8c8a6028615222565b8360136020020152614e7c8360146020020151610c6d836102000151610c68856101c00151610c8c8a6029615222565b8360146020020152614eac8360156020020151610c6d836102000151610c68856101e00151610c8c8a602a615222565b836015602002015250505050565b614f1760405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006040518060800160405280614f4d7f10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e76121d9565b8152602001614f7b7f0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b6121d9565b8152602001614fa87e544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac156121d9565b8152602001614fd67f222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b6121d9565b90529050614ff3614fe886601b615222565b610c6d876002615222565b61012083018190526150279061501c90614742906150119080612cb5565b856101200151612cb5565b836101200151612cb5565b825261503485601c615222565b602083015261504485601d615222565b604083015261505485601e615222565b60608301528151602083015161507c91614431916150729190612ce2565b8460400151612ce2565b608083015261508f6139fc86600c615222565b61014083015281516150b1906150a790836000610e64565b8360800151612ce2565b60a08301526150dd8460166020020151610c6d846101400151610c688660a00151610c8c8b6027615222565b6102c085015260208201516150f8906150a790836001610e64565b60c08301526151248460176020020151610c6d846101400151610c688660c00151610c8c8b6028615222565b6102e0850152604082015161513f906150a790836002610e64565b60e083015261516b8460186020020151610c6d846101400151610c688660e00151610c8c8b6029615222565b6103008501526060820151615186906150a790836003610e64565b6101008301526151b48460196020020151610c6d846101400151610c68866101000151610c8c8b602a615222565b84601961387f565b60006151c9818481612d8a565b905060015b601a81101561521b5761521182610c6d8684601a81106151f0576151f0615c72565b602002015186615201600187615ca1565b60198110610e6457610e64615c72565b91506001016151ce565b5092915050565b60008282602b81111561523757615237615f6b565b602c811061524757615247615c72565b60200201519392505050565b604051806103c00160405280600081526020016000815260200160008152602001615291604051806040016040528060008152602001600081525090565b81526020016152b3604051806040016040528060008152602001600081525090565b81526020016152d5604051806040016040528060008152602001600081525090565b81526020016152f7604051806040016040528060008152602001600081525090565b8152602001615319604051806040016040528060008152602001600081525090565b815260200161533b604051806040016040528060008152602001600081525090565b815260200161535d604051806040016040528060008152602001600081525090565b815260200161537f604051806040016040528060008152602001600081525090565b81526020016153a1604051806040016040528060008152602001600081525090565b81526020016153c3604051806040016040528060008152602001600081525090565b81526020016153e5604051806040016040528060008152602001600081525090565b8152602001615407604051806040016040528060008152602001600081525090565b8152602001615429604051806040016040528060008152602001600081525090565b815260200161544b604051806040016040528060008152602001600081525090565b815260200161546d604051806040016040528060008152602001600081525090565b815260200161548f604051806040016040528060008152602001600081525090565b81526020016154b1604051806040016040528060008152602001600081525090565b81526020016154d3604051806040016040528060008152602001600081525090565b81526020016154f5604051806040016040528060008152602001600081525090565b8152602001615517604051806040016040528060008152602001600081525090565b8152602001615539604051806040016040528060008152602001600081525090565b815260200161555b604051806040016040528060008152602001600081525090565b815260200161557d604051806040016040528060008152602001600081525090565b815260200161559f604051806040016040528060008152602001600081525090565b81526020016155c1604051806040016040528060008152602001600081525090565b81526020016155e3604051806040016040528060008152602001600081525090565b8152602001615605604051806040016040528060008152602001600081525090565b905290565b6040518061022001604052806000815260200160008152602001600081526020016156566040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156866040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156b66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156e66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157166040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157466040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157766040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157a66040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016157b3615a42565b81526020016157c0615a70565b81526020016157cd615a8f565b81526020016157da61596a565b815260200161580a6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016156056040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200161587161592c565b815260200161587e61596a565b815260200161588b61596a565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806109400160405280604a906020820280368337509192915050565b604051806109400160405280604a905b60408051808201909152600080825260208201528152602001906001900390816158e35790505090565b604051806101a00160405280600d906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b604051806103800160405280601c906020820280368337509192915050565b604051806105a00160405280602d906020820280368337509192915050565b60405180610da00160405280606d906020820280368337509192915050565b604051806103a00160405280601d906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b604051806103800160405280601c905b615a5a615a04565b815260200190600190039081615a525790505090565b604051806105800160405280602c906020820280368337509192915050565b604051806103600160405280601b905b615aca6040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200190600190039081615a9f5790505090565b60008060008060408587031215615af657600080fd5b843567ffffffffffffffff811115615b0d57600080fd5b8501601f81018713615b1e57600080fd5b803567ffffffffffffffff811115615b3557600080fd5b876020828401011115615b4757600080fd5b60209182019550935085013567ffffffffffffffff811115615b6857600080fd5b8501601f81018713615b7957600080fd5b803567ffffffffffffffff811115615b9057600080fd5b8760208260051b8401011115615ba557600080fd5b949793965060200194505050565b60008085851115615bc357600080fd5b83861115615bd057600080fd5b5050820193919092039150565b80356020831015610b6c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610b6c57610b6c615c19565b80820180821115610b6c57610b6c615c19565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610b6c57610b6c615c19565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615ce557615ce5615c19565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082615d2a57615d2a615cec565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8151600090829060208501835b82811015615d89578151845260209384019390910190600101615d6b565b509195945050505050565b60008183825b600d811015615db9578151835260209283019290910190600101615d9a565b5050506101a08201905092915050565b60008183825b6009811015615dee578151835260209283019290910190600101615dcf565b5050506101208201905092915050565b600082615e0d57615e0d615cec565b500490565b60008183825b602d811015615e37578151835260209283019290910190600101615e18565b5050506105a08201905092915050565b60008183825b606d811015615e6c578151835260209283019290910190600101615e4d565b505050610da08201905092915050565b60008183825b601d811015615ea1578151835260209283019290910190600101615e82565b5050506103a08201905092915050565b60008183825b6005811015615ed6578151835260209283019290910190600101615eb7565b50505060a08201905092915050565b600081615ef457615ef4615c19565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000825160005b81811015615f3b5760208186018101518583015201615f21565b506000920191825250919050565b600060208284031215615f5b57600080fd5b81518015158114612d7457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220713aa0ceca32cc201db9cc83c7b665d6bec0c53ae3338734af7de9935d933c1964736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}