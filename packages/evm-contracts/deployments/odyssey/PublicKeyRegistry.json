{
  "address": "0x14a2e78045Cd2D8F59e9217e4562DD9836939F5d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "publicKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "checkPublicKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isPublicKeyHashValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "publicKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "setPublicKeyValid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "providerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "publicKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            }
          ],
          "internalType": "struct PublicKeyRegistry.PublicKeyValidity[]",
          "name": "validity",
          "type": "tuple[]"
        }
      ],
      "name": "setPublicKeysValid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f7569d8c22c426edb71dec89c149f54282eafe1c9050cc44bece0de2701292c",
  "receipt": {
    "to": null,
    "from": "0xEE0A4782efd390120A29F050A76B297D078e1df9",
    "contractAddress": "0x14a2e78045Cd2D8F59e9217e4562DD9836939F5d",
    "transactionIndex": 1,
    "gasUsed": "363523",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000200000000000000000000000000400000000000000000000000000080000000000000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000010000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000008000000000000000",
    "blockHash": "0x554eb0375e7ad9e6b77f6f58d122082c3f02ffe768e5c2744f32d82305220513",
    "transactionHash": "0x8f7569d8c22c426edb71dec89c149f54282eafe1c9050cc44bece0de2701292c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4609429,
        "transactionHash": "0x8f7569d8c22c426edb71dec89c149f54282eafe1c9050cc44bece0de2701292c",
        "address": "0x14a2e78045Cd2D8F59e9217e4562DD9836939F5d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ee0a4782efd390120a29f050a76b297d078e1df9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x554eb0375e7ad9e6b77f6f58d122082c3f02ffe768e5c2744f32d82305220513"
      }
    ],
    "blockNumber": 4609429,
    "cumulativeGasUsed": "407353",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ee80873e6e428c51ff9ffdad579e137",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicKeyHash\",\"type\":\"bytes32\"}],\"name\":\"checkPublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPublicKeyHashValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setPublicKeyValid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"internalType\":\"struct PublicKeyRegistry.PublicKeyValidity[]\",\"name\":\"validity\",\"type\":\"tuple[]\"}],\"name\":\"setPublicKeysValid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isPublicKeyHashValid(bytes32,bytes32)\":{\"notice\":\"providerId => publicKeyHash => isValid\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PublicKeyRegistry.sol\":\"PublicKeyRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PublicKeyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.27;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PublicKeyRegistry is Ownable(msg.sender) {\\n    /// providerId => publicKeyHash => isValid\\n    mapping(bytes32 => mapping(bytes32 => bool)) public isPublicKeyHashValid;\\n\\n    function setPublicKeyValid(\\n        bytes32 providerId,\\n        bytes32 publicKeyHash,\\n        bool valid\\n    ) external onlyOwner {\\n        isPublicKeyHashValid[providerId][publicKeyHash] = valid;\\n    }\\n\\n    struct PublicKeyValidity {\\n        bytes32 providerId;\\n        bytes32 publicKeyHash;\\n        bool valid;\\n    }\\n\\n    function setPublicKeysValid(\\n        PublicKeyValidity[] calldata validity\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < validity.length; i++) {\\n            PublicKeyValidity calldata v = validity[i];\\n            isPublicKeyHashValid[v.providerId][v.publicKeyHash] = v.valid;\\n        }\\n    }\\n\\n    function checkPublicKey(\\n        bytes32 providerId,\\n        bytes32 publicKeyHash\\n    ) external view returns (bool) {\\n        return isPublicKeyHashValid[providerId][publicKeyHash];\\n    }\\n}\\n\",\"keccak256\":\"0x49e25ad2c49b24f9fa828b12fa5bc1df386dfc1e6311cc680efb7366292ec0c9\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61052b806100a06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fd578063abcf87c614610125578063c059d83b14610138578063f2fde38b1461014b57600080fd5b80635879142a14610082578063715018a6146100c557806380a798cf146100cf575b600080fd5b6100b061009036600461038b565b600091825260016020908152604080842092845291905290205460ff1690565b60405190151581526020015b60405180910390f35b6100cd61015e565b005b6100b06100dd36600461038b565b600160209081526000928352604080842090915290825290205460ff1681565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bc565b6100cd6101333660046103ad565b610172565b6100cd610146366004610439565b61020a565b6100cd61015936600461046e565b61025a565b6101666102c3565b6101706000610316565b565b61017a6102c3565b60005b818110156102055736838383818110610198576101986104ab565b90506060020190508060400160208101906101b391906104da565b8135600090815260016020818152604080842095820135845294905292902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790550161017d565b505050565b6102126102c3565b6000928352600160209081526040808520938552929052912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6102626102c3565b73ffffffffffffffffffffffffffffffffffffffff81166102b7576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6102c081610316565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610170576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102ae565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561039e57600080fd5b50508035926020909101359150565b600080602083850312156103c057600080fd5b823567ffffffffffffffff8111156103d757600080fd5b8301601f810185136103e857600080fd5b803567ffffffffffffffff8111156103ff57600080fd5b85602060608302840101111561041457600080fd5b6020919091019590945092505050565b8035801515811461043457600080fd5b919050565b60008060006060848603121561044e57600080fd5b833592506020840135915061046560408501610424565b90509250925092565b60006020828403121561048057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156104ec57600080fd5b6104a48261042456fea2646970667358221220c1a682c9ba1fa8a954599590058bf6662e7ce496c33d7680302b8cf9abdb592764736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fd578063abcf87c614610125578063c059d83b14610138578063f2fde38b1461014b57600080fd5b80635879142a14610082578063715018a6146100c557806380a798cf146100cf575b600080fd5b6100b061009036600461038b565b600091825260016020908152604080842092845291905290205460ff1690565b60405190151581526020015b60405180910390f35b6100cd61015e565b005b6100b06100dd36600461038b565b600160209081526000928352604080842090915290825290205460ff1681565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bc565b6100cd6101333660046103ad565b610172565b6100cd610146366004610439565b61020a565b6100cd61015936600461046e565b61025a565b6101666102c3565b6101706000610316565b565b61017a6102c3565b60005b818110156102055736838383818110610198576101986104ab565b90506060020190508060400160208101906101b391906104da565b8135600090815260016020818152604080842095820135845294905292902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790550161017d565b505050565b6102126102c3565b6000928352600160209081526040808520938552929052912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6102626102c3565b73ffffffffffffffffffffffffffffffffffffffff81166102b7576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6102c081610316565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610170576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102ae565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561039e57600080fd5b50508035926020909101359150565b600080602083850312156103c057600080fd5b823567ffffffffffffffff8111156103d757600080fd5b8301601f810185136103e857600080fd5b803567ffffffffffffffff8111156103ff57600080fd5b85602060608302840101111561041457600080fd5b6020919091019590945092505050565b8035801515811461043457600080fd5b919050565b60008060006060848603121561044e57600080fd5b833592506020840135915061046560408501610424565b90509250925092565b60006020828403121561048057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156104ec57600080fd5b6104a48261042456fea2646970667358221220c1a682c9ba1fa8a954599590058bf6662e7ce496c33d7680302b8cf9abdb592764736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isPublicKeyHashValid(bytes32,bytes32)": {
        "notice": "providerId => publicKeyHash => isValid"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1167,
        "contract": "contracts/PublicKeyRegistry.sol:PublicKeyRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7600,
        "contract": "contracts/PublicKeyRegistry.sol:PublicKeyRegistry",
        "label": "isPublicKeyHashValid",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      }
    }
  }
}