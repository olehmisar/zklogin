/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JwtVerifierP256 {
  export type VerificationDataStruct = {
    proof: BytesLike;
    jwtIat: BigNumberish;
    jwtNonce: AddressLike;
    publicKeyHash: BytesLike;
  };

  export type VerificationDataStructOutput = [
    proof: string,
    jwtIat: bigint,
    jwtNonce: string,
    publicKeyHash: string
  ] & {
    proof: string;
    jwtIat: bigint;
    jwtNonce: string;
    publicKeyHash: string;
  };
}

export declare namespace EoaAccount {
  export type WebauthnPublicKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type WebauthnPublicKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface EoaAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountId"
      | "authProviderId"
      | "dummy"
      | "hello"
      | "proofVerifier"
      | "publicKeyRegistry"
      | "recover"
      | "setAccountId"
      | "webauthnPublicKey"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authProviderId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dummy", values?: undefined): string;
  encodeFunctionData(functionFragment: "hello", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proofVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [
      JwtVerifierP256.VerificationDataStruct,
      EoaAccount.WebauthnPublicKeyStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountId",
    values: [
      EoaAccount.WebauthnPublicKeyStruct,
      BytesLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "webauthnPublicKey",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authProviderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dummy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hello", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proofVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "webauthnPublicKey",
    data: BytesLike
  ): Result;
}

export interface EoaAccount extends BaseContract {
  connect(runner?: ContractRunner | null): EoaAccount;
  waitForDeployment(): Promise<this>;

  interface: EoaAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountId: TypedContractMethod<[], [string], "view">;

  authProviderId: TypedContractMethod<[], [string], "view">;

  dummy: TypedContractMethod<[], [void], "nonpayable">;

  hello: TypedContractMethod<[], [string], "view">;

  proofVerifier: TypedContractMethod<[], [string], "view">;

  publicKeyRegistry: TypedContractMethod<[], [string], "view">;

  recover: TypedContractMethod<
    [
      verificationData: JwtVerifierP256.VerificationDataStruct,
      newP256PublicKey: EoaAccount.WebauthnPublicKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  setAccountId: TypedContractMethod<
    [
      webauthnPublicKey_: EoaAccount.WebauthnPublicKeyStruct,
      accountId_: BytesLike,
      publicKeyRegistry_: AddressLike,
      proofVerifier_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  webauthnPublicKey: TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authProviderId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dummy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hello"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proofVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicKeyRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recover"
  ): TypedContractMethod<
    [
      verificationData: JwtVerifierP256.VerificationDataStruct,
      newP256PublicKey: EoaAccount.WebauthnPublicKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAccountId"
  ): TypedContractMethod<
    [
      webauthnPublicKey_: EoaAccount.WebauthnPublicKeyStruct,
      accountId_: BytesLike,
      publicKeyRegistry_: AddressLike,
      proofVerifier_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "webauthnPublicKey"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  filters: {};
}
