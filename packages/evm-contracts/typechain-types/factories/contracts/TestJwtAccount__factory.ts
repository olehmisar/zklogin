/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestJwtAccount,
  TestJwtAccountInterface,
} from "../../contracts/TestJwtAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "accountId_",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "jwtAud_",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "authProviderId_",
        type: "bytes32",
      },
      {
        internalType: "contract UltraVerifier",
        name: "ultraVerifier_",
        type: "address",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "authProviderId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jwtAud",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicKeyRegistry",
    outputs: [
      {
        internalType: "contract PublicKeyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ultraVerifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "jwtNonce",
            type: "address",
          },
          {
            internalType: "uint256[18]",
            name: "publicKeyLimbs",
            type: "uint256[18]",
          },
          {
            internalType: "uint256[18]",
            name: "publicKeyRedcLimbs",
            type: "uint256[18]",
          },
        ],
        internalType: "struct JwtVerifier.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TestJwtAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJwtAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestJwtAccount__factory extends ContractFactory {
  constructor(...args: TestJwtAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    accountId_: BytesLike,
    jwtAud_: string,
    authProviderId_: BytesLike,
    ultraVerifier_: AddressLike,
    publicKeyRegistry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      accountId_,
      jwtAud_,
      authProviderId_,
      ultraVerifier_,
      publicKeyRegistry_,
      overrides || {}
    );
  }
  override deploy(
    accountId_: BytesLike,
    jwtAud_: string,
    authProviderId_: BytesLike,
    ultraVerifier_: AddressLike,
    publicKeyRegistry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      accountId_,
      jwtAud_,
      authProviderId_,
      ultraVerifier_,
      publicKeyRegistry_,
      overrides || {}
    ) as Promise<
      TestJwtAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestJwtAccount__factory {
    return super.connect(runner) as TestJwtAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJwtAccountInterface {
    return new Interface(_abi) as TestJwtAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestJwtAccount {
    return new Contract(address, _abi, runner) as unknown as TestJwtAccount;
  }
}
