/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestJwtAccount,
  TestJwtAccountInterface,
} from "../../contracts/TestJwtAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "accountId_",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "authProviderId_",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "proofVerifier",
        type: "address",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "authProviderId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofVerifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicKeyRegistry",
    outputs: [
      {
        internalType: "contract PublicKeyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "jwtNonce",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
        ],
        internalType: "struct JwtVerifier.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610b01380380610b0183398101604081905261002f91610067565b6001600160a01b039182166080521660a0526000919091556001556100b3565b6001600160a01b038116811461006457600080fd5b50565b6000806000806080858703121561007d57600080fd5b84516020860151604087015191955093506100978161004f565b60608601519092506100a88161004f565b939692955090935050565b60805160a051610a1d6100e46000396000818160d901526101de015260008181608d015261044f0152610a1d6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806386aeebf71161005057806386aeebf7146100d45780639cfd7cff146100fb578063a8afd3e01461010457600080fd5b80636b124f5b1461006c5780637fa417b314610088575b600080fd5b61007560015481565b6040519081526020015b60405180910390f35b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161007f565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b61007560005481565b610117610112366004610642565b610119565b005b600061012c6101278361072b565b61019e565b90508061019a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4a77744163636f756e743a20696e76616c69642070726f6f660000000000000060448201526064015b60405180910390fd5b5050565b60015460608201516040517f5879142a000000000000000000000000000000000000000000000000000000008152600481019290925260248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635879142a90604401602060405180830381865afa15801561023a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025e9190610807565b6102c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7075626c6963206b65792068617368206d69736d6174636800000000000000006044820152606401610191565b60006102d383604001516104d0565b80519091506003906000906102e89083610858565b67ffffffffffffffff81111561030057610300610684565b604051908082528060200260200182016040528015610329578160200160208202803683370190505b5090506000805482828061033c9061086b565b93508151811061034e5761034e6108a3565b602002602001018181525050856020015160001b82828061036e9061086b565b935081518110610380576103806108a3565b60209081029190910101526060860151828261039b8161086b565b9350815181106103ad576103ad6108a3565b60200260200101818152505060005b845181101561040f578481815181106103d7576103d76108a3565b016020015160f81c83836103ea8161086b565b9450815181106103fc576103fc6108a3565b60209081029190910101526001016103bc565b5085516040517fea50d0e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163ea50d0e491610485919086906004016108d2565b602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610807565b9695505050505050565b60606104dd8260206104e3565b92915050565b60608260006104f3846002610988565b67ffffffffffffffff81111561050b5761050b610684565b6040519080825280601f01601f191660200182016040528015610535576020820181803683370190505b5090506000610545856002610988565b610550906001610858565b90505b60018111156105f7577f303132333435363738396162636465660000000000000000000000000000000083600f1660108110610591576105916108a3565b1a60f81b826105a160028461099f565b815181106105b1576105b16108a3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049290921c916105f0816109b2565b9050610553565b50811561063a576040517fe22e27eb0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604401610191565b949350505050565b60006020828403121561065457600080fd5b813567ffffffffffffffff81111561066b57600080fd5b82016080818503121561067d57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156106d6576106d6610684565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561072357610723610684565b604052919050565b60006080823603121561073d57600080fd5b6107456106b3565b823567ffffffffffffffff81111561075c57600080fd5b830136601f82011261076d57600080fd5b803567ffffffffffffffff81111561078757610787610684565b6107b860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016106dc565b8181523660208385010111156107cd57600080fd5b8160208401602083013760006020928201830152835284810135908301525060408084013590820152606092830135928101929092525090565b60006020828403121561081957600080fd5b8151801515811461067d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104dd576104dd610829565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361089c5761089c610829565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604081526000835180604084015260005b8181101561090057602081870181015160608684010152016108e3565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f82011683019050606081016060848303016020850152808551808352608084019150602087019350600092505b8083101561097d578351825260208201915060208401935060018301925061095a565b509695505050505050565b80820281158282048414176104dd576104dd610829565b818103818111156104dd576104dd610829565b6000816109c1576109c1610829565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220c293d13286999ad1803e7b62498e7336deeebd69e7785003eb0236ea6f3bf5c164736f6c634300081b0033";

type TestJwtAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJwtAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestJwtAccount__factory extends ContractFactory {
  constructor(...args: TestJwtAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    accountId_: BytesLike,
    authProviderId_: BytesLike,
    proofVerifier: AddressLike,
    publicKeyRegistry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      accountId_,
      authProviderId_,
      proofVerifier,
      publicKeyRegistry_,
      overrides || {}
    );
  }
  override deploy(
    accountId_: BytesLike,
    authProviderId_: BytesLike,
    proofVerifier: AddressLike,
    publicKeyRegistry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      accountId_,
      authProviderId_,
      proofVerifier,
      publicKeyRegistry_,
      overrides || {}
    ) as Promise<
      TestJwtAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestJwtAccount__factory {
    return super.connect(runner) as TestJwtAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJwtAccountInterface {
    return new Interface(_abi) as TestJwtAccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestJwtAccount {
    return new Contract(address, _abi, runner) as unknown as TestJwtAccount;
  }
}
