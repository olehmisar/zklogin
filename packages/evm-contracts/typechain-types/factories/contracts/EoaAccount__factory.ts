/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  EoaAccount,
  EoaAccountInterface,
} from "../../contracts/EoaAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "authProviderId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dummy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "r",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "s",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "authenticatorData",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "clientDataJSON",
            type: "string",
          },
          {
            internalType: "uint16",
            name: "challengeIndex",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "typeIndex",
            type: "uint16",
          },
          {
            internalType: "bool",
            name: "userVerificationRequired",
            type: "bool",
          },
        ],
        internalType: "struct WebAuthnP256.Metadata",
        name: "metadata",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "getDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hello",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofVerifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicKeyRegistry",
    outputs: [
      {
        internalType: "contract PublicKeyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "jwtNonce",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
        ],
        internalType: "struct JwtVerifierP256.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "newP256PublicKey",
        type: "tuple",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "webauthnPublicKey_",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "accountId_",
        type: "bytes32",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry_",
        type: "address",
      },
      {
        internalType: "contract UltraVerifier",
        name: "proofVerifier_",
        type: "address",
      },
    ],
    name: "setAccountId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "webauthnPublicKey",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040527f8f2f90d8304f6eb382d037c47a041d8c8b4d18bdd8b082fa32828e016a584ca7600155348015603357600080fd5b506118ec806100436000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806386aeebf711610081578063be6bbfd91161005b578063be6bbfd9146101e7578063c389ca27146101fa578063e7a5d4f91461020d57600080fd5b806386aeebf7146101b55780639cfd7cff146101d5578063affed0e0146101de57600080fd5b80636b124f5b116100b25780636b124f5b146101365780637dc0872e1461014d5780637fa417b31461017057600080fd5b806319ff1d21146100d95780631e203b541461012157806332e43a1114610134575b600080fd5b604080518082018252600b81527f68656c6c6f20776f726c6400000000000000000000000000000000000000000060208201529051610118919061114d565b60405180910390f35b61013461012f366004611178565b610220565b005b61013f60015481565b604051908152602001610118565b60055460065461015b919082565b60408051928352602083019190915201610118565b6003546101909073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610118565b6002546101909073ffffffffffffffffffffffffffffffffffffffff1681565b61013f60005481565b61013f60045481565b6101346101f53660046111f1565b6103b0565b610134610208366004611353565b610480565b61013f61021b3660046113f1565b6105e3565b61025761022c8361144b565b60005460015460025460035473ffffffffffffffffffffffffffffffffffffffff918216911661061e565b6102c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b6102d260608301604084016114d7565b73ffffffffffffffffffffffffffffffffffffffff168160405160200161030b9190813581526020918201359181019190915260400190565b6040516020818303038152906040528051906020012060601c73ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e76616c69642070323536207075626c6963206b657900000000000000000060448201526064016102b9565b80356005556020013560065550565b333014610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f742073656c6600000000000000000000000000000000000000000000000060448201526064016102b9565b83356005556020909301356006556000919091556002805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560038054929093169116179055565b600480546000918261049183611523565b919050558686866040516020016104ab949392919061155b565b6040516020818303038152906040528051906020012090506104fc81836104d1906115d1565b6104e03687900387018761168a565b6040805180820190915260055481526006546020820152610911565b61050557600080fd5b60008673ffffffffffffffffffffffffffffffffffffffff16858760405161052d91906116db565b60006040518083038185875af1925050503d806000811461056a576040519150601f19603f3d011682016040523d82523d6000602084013e61056f565b606091505b50509050806105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f63616c6c206661696c656400000000000000000000000000000000000000000060448201526064016102b9565b50505050505050565b60006004548484846040516020016105fe949392919061155b565b6040516020818303038152906040528051906020012090505b9392505050565b60608501516040517f5879142a00000000000000000000000000000000000000000000000000000000815260048101859052602481019190915260009073ffffffffffffffffffffffffffffffffffffffff841690635879142a90604401602060405180830381865afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd91906116f7565b610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7075626c6963206b65792068617368206d69736d61746368000000000000000060448201526064016102b9565b60006107328760400151610b43565b80519091506003906000906107479083611714565b67ffffffffffffffff81111561075f5761075f611243565b604051908082528060200260200182016040528015610788578160200160208202803683370190505b509050600088828261079981611523565b9350815181106107ab576107ab611727565b602002602001018181525050896020015160001b8282806107cb90611523565b9350815181106107dd576107dd611727565b602090810291909101015260608a015182826107f881611523565b93508151811061080a5761080a611727565b60200260200101818152505060005b845181101561086c5784818151811061083457610834611727565b016020015160f81c838361084781611523565b94508151811061085957610859611727565b6020908102919091010152600101610819565b5089516040517fea50d0e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169163ea50d0e4916108c291908690600401611756565b602060405180830381865afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090391906116f7565b9a9950505050505050505050565b6000602584600001515110806109535750610951846000015160208151811061093c5761093c611727565b602001015160f81c60f81b8560800151610b6c565b155b1561096057506000610b3b565b60006040518060400160405280601581526020017f2274797065223a22776562617574686e2e67657422000000000000000000000081525090506109b1818660200151876060015161ffff16610c5e565b6109bf576000915050610b3b565b60006109ee876040516020016109d791815260200190565b604051602081830303815290604052600180610d3d565b9050600081604051602001610a0391906117b0565b6040516020818303038152906040529050610a2b818860200151896040015161ffff16610c5e565b610a3b5760009350505050610b3b565b600060028860200151604051610a5191906116db565b602060405180830381855afa158015610a6e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a91919061181c565b905060006002896000015183604051602001610aae929190611835565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ae6916116db565b602060405180830381855afa158015610b03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b26919061181c565b9050610b33818989610e4e565b955050505050505b949350505050565b6060610b6673ffffffffffffffffffffffffffffffffffffffff83166014610f88565b92915050565b60007f010000000000000000000000000000000000000000000000000000000000000083811614610b9f57506000610b66565b818015610bce57507f040000000000000000000000000000000000000000000000000000000000000083811614155b15610bdb57506000610b66565b7f080000000000000000000000000000000000000000000000000000000000000083811614610c55577ff0000000000000000000000000000000000000000000000000000000000000007f1000000000000000000000000000000000000000000000000000000000000000841601610c5557506000610b66565b50600192915050565b825182516000918591859190845b82811015610d2e5781610c7f8289611714565b10610c9257600095505050505050610617565b83610c9d8289611714565b81518110610cad57610cad611727565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110610cec57610cec611727565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614610d2657600095505050505050610617565b600101610c6c565b50600198975050505050505050565b606083518015610e46576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526106708515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f52602083018181018388602001018051600082525b60038a0199508951603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f811651600353506000518452600484019350828410610db95790526020016040527f3d3d000000000000000000000000000000000000000000000000000000000000600384066002048083039190915260008615159091029182900352900382525b509392505050565b8151602080840151835184830151604080519485018990528401949094526060830191909152608082015260a08101919091526000908190819060149060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ec6916116db565b600060405180830381855afa9150503d8060008114610f01576040519150601f19603f3d011682016040523d82523d6000602084013e610f06565b606091505b5091509150818015610f19575080516020145b8015610f7e575080601f81518110610f3357610f33611727565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f0100000000000000000000000000000000000000000000000000000000000000145b9695505050505050565b6060826000610f98846002611857565b67ffffffffffffffff811115610fb057610fb0611243565b6040519080825280601f01601f191660200182016040528015610fda576020820181803683370190505b5090506000610fea856002611857565b610ff5906001611714565b90505b600181111561109c577f303132333435363738396162636465660000000000000000000000000000000083600f166010811061103657611036611727565b1a60f81b8261104660028461186e565b8151811061105657611056611727565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049290921c9161109581611881565b9050610ff8565b508115610b3b576040517fe22e27eb00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044016102b9565b60005b838110156110fa5781810151838201526020016110e2565b50506000910152565b6000815180845261111b8160208601602086016110df565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106176020830184611103565b60006040828403121561117257600080fd5b50919050565b6000806060838503121561118b57600080fd5b823567ffffffffffffffff8111156111a257600080fd5b8301608081860312156111b457600080fd5b91506111c38460208501611160565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff811681146111ee57600080fd5b50565b60008060008060a0858703121561120757600080fd5b6112118686611160565b9350604085013592506060850135611228816111cc565b91506080850135611238816111cc565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561129557611295611243565b60405290565b60008067ffffffffffffffff8411156112b6576112b6611243565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff8211171561130357611303611243565b60405283815290508082840185101561131b57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261134457600080fd5b6106178383356020850161129b565b600080600080600060c0868803121561136b57600080fd5b8535611376816111cc565b9450602086013567ffffffffffffffff81111561139257600080fd5b61139e88828901611333565b945050604086013592506113b58760608801611160565b915060a086013567ffffffffffffffff8111156113d157600080fd5b860160a081890312156113e357600080fd5b809150509295509295909350565b60008060006060848603121561140657600080fd5b8335611411816111cc565b9250602084013567ffffffffffffffff81111561142d57600080fd5b61143986828701611333565b93969395505050506040919091013590565b60006080823603121561145d57600080fd5b6040516080810167ffffffffffffffff8111828210171561148057611480611243565b604052823567ffffffffffffffff81111561149a57600080fd5b6114a636828601611333565b8252506020838101359082015260408301356114c1816111cc565b6040820152606092830135928101929092525090565b6000602082840312156114e957600080fd5b8135610617816111cc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611554576115546114f4565b5060010190565b84815273ffffffffffffffffffffffffffffffffffffffff841660208201526080604082015260006115906080830185611103565b905082606083015295945050505050565b803561ffff811681146115b357600080fd5b919050565b80151581146111ee57600080fd5b80356115b3816115b8565b600060a082360312156115e357600080fd5b6115eb611272565b823567ffffffffffffffff81111561160257600080fd5b61160e36828601611333565b825250602083013567ffffffffffffffff81111561162b57600080fd5b830136601f82011261163c57600080fd5b61164b3682356020840161129b565b60208301525061165d604084016115a1565b604082015261166e606084016115a1565b606082015261167f608084016115c6565b608082015292915050565b6000604082840312801561169d57600080fd5b506040805190810167ffffffffffffffff811182821017156116c1576116c1611243565b604052823581526020928301359281019290925250919050565b600082516116ed8184602087016110df565b9190910192915050565b60006020828403121561170957600080fd5b8151610617816115b8565b80820180821115610b6657610b666114f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6040815260006117696040830185611103565b828103602084015280845180835260208301915060208601925060005b818110156117a4578351835260209384019390920191600101611786565b50909695505050505050565b7f226368616c6c656e6765223a22000000000000000000000000000000000000008152600082516117e881600d8501602087016110df565b7f2200000000000000000000000000000000000000000000000000000000000000600d939091019283015250600e01919050565b60006020828403121561182e57600080fd5b5051919050565b600083516118478184602088016110df565b9190910191825250602001919050565b8082028115828204841417610b6657610b666114f4565b81810381811115610b6657610b666114f4565b600081611890576118906114f4565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212205062525b8d6f1ea9fe5bb12e10791267502f653132378cff3e7f234a8c73fb7564736f6c634300081b0033";

type EoaAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EoaAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EoaAccount__factory extends ContractFactory {
  constructor(...args: EoaAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EoaAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EoaAccount__factory {
    return super.connect(runner) as EoaAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EoaAccountInterface {
    return new Interface(_abi) as EoaAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): EoaAccount {
    return new Contract(address, _abi, runner) as unknown as EoaAccount;
  }
}
