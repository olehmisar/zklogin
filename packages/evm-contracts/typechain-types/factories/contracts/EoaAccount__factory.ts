/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  EoaAccount,
  EoaAccountInterface,
} from "../../contracts/EoaAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "authProviderId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "r",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "s",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "authenticatorData",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "clientDataJSON",
            type: "string",
          },
          {
            internalType: "uint16",
            name: "challengeIndex",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "typeIndex",
            type: "uint16",
          },
          {
            internalType: "bool",
            name: "userVerificationRequired",
            type: "bool",
          },
        ],
        internalType: "struct WebAuthnP256.Metadata",
        name: "metadata",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getWebAuthnPublicKey",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofVerifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicKeyRegistry",
    outputs: [
      {
        internalType: "contract PublicKeyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "jwtNonce",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
        ],
        internalType: "struct JwtVerifierP256.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "newP256PublicKey",
        type: "tuple",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "webauthnPublicKey_",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "accountId_",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "authProviderId_",
        type: "bytes32",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry_",
        type: "address",
      },
      {
        internalType: "contract UltraVerifier",
        name: "proofVerifier_",
        type: "address",
      },
    ],
    name: "setAccountId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "webauthnPublicKey",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506119288061001f6000396000f3fe6080604052600436106100b55760003560e01c80639cfd7cff11610069578063affed0e01161004e578063affed0e0146101f1578063bb3da92d14610207578063c389ca271461025257600080fd5b80639cfd7cff146101bb578063ada4799c146101d157600080fd5b80637dc0872e1161009a5780637dc0872e1461010c5780637fa417b31461013c57806386aeebf71461018e57600080fd5b80631e203b54146100c15780636b124f5b146100e357600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506100e16100dc366004611118565b610272565b005b3480156100ef57600080fd5b506100f960015481565b6040519081526020015b60405180910390f35b34801561011857600080fd5b50600554600654610127919082565b60408051928352602083019190915201610103565b34801561014857600080fd5b506003546101699073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b34801561019a57600080fd5b506002546101699073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101c757600080fd5b506100f960005481565b3480156101dd57600080fd5b506100e16101ec366004611191565b610402565b3480156101fd57600080fd5b506100f960045481565b34801561021357600080fd5b50604080518082018252600080825260209182015281518083018352600554808252600654918301918252835190815290519181019190915201610103565b34801561025e57600080fd5b506100e161026d366004611201565b6104d5565b61028260608301604084016112ce565b73ffffffffffffffffffffffffffffffffffffffff16816040516020016102bb9190813581526020918201359181019190915260400190565b6040516020818303038152906040528051906020012060601c73ffffffffffffffffffffffffffffffffffffffff1614610356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f696e76616c696420576562417574686e207075626c6963206b6579000000000060448201526064015b60405180910390fd5b61038d610362836113fb565b60005460015460025460035473ffffffffffffffffffffffffffffffffffffffff918216911661063d565b6103f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015260640161034d565b80356005556020013560065550565b33301461046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f742073656c66000000000000000000000000000000000000000000000000604482015260640161034d565b84356005556020909401356006556000929092556001556002805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560038054929093169116179055565b60048054600091826104e6836114b6565b91905055878787876040516020016105029594939291906114ee565b604051602081830303815290604052805190602001209050610553818361052890611599565b61053736879003870187611652565b6040805180820190915260055481526006546020820152610930565b61055c57600080fd5b60008773ffffffffffffffffffffffffffffffffffffffff168588886040516105869291906116a3565b60006040518083038185875af1925050503d80600081146105c3576040519150601f19603f3d011682016040523d82523d6000602084013e6105c8565b606091505b5050905080610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f63616c6c206661696c6564000000000000000000000000000000000000000000604482015260640161034d565b5050505050505050565b60608501516040517f5879142a00000000000000000000000000000000000000000000000000000000815260048101859052602481019190915260009073ffffffffffffffffffffffffffffffffffffffff841690635879142a90604401602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906116b3565b610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7075626c6963206b65792068617368206d69736d617463680000000000000000604482015260640161034d565b60006107518760400151610b62565b805190915060039060009061076690836116d0565b67ffffffffffffffff81111561077e5761077e6112eb565b6040519080825280602002602001820160405280156107a7578160200160208202803683370190505b50905060008882826107b8816114b6565b9350815181106107ca576107ca6116e3565b602002602001018181525050896020015160001b8282806107ea906114b6565b9350815181106107fc576107fc6116e3565b602090810291909101015260608a01518282610817816114b6565b935081518110610829576108296116e3565b60200260200101818152505060005b845181101561088b57848181518110610853576108536116e3565b016020015160f81c8383610866816114b6565b945081518110610878576108786116e3565b6020908102919091010152600101610838565b5089516040517fea50d0e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169163ea50d0e4916108e191908690600401611736565b602060405180830381865afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092291906116b3565b9a9950505050505050505050565b6000602584600001515110806109725750610970846000015160208151811061095b5761095b6116e3565b602001015160f81c60f81b8560800151610b8b565b155b1561097f57506000610b5a565b60006040518060400160405280601581526020017f2274797065223a22776562617574686e2e67657422000000000000000000000081525090506109d0818660200151876060015161ffff16610c7d565b6109de576000915050610b5a565b6000610a0d876040516020016109f691815260200190565b604051602081830303815290604052600180610d5e565b9050600081604051602001610a2291906117d0565b6040516020818303038152906040529050610a4a818860200151896040015161ffff16610c7d565b610a5a5760009350505050610b5a565b600060028860200151604051610a70919061183c565b602060405180830381855afa158015610a8d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610ab09190611858565b905060006002896000015183604051602001610acd929190611871565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610b059161183c565b602060405180830381855afa158015610b22573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b459190611858565b9050610b52818989610e6f565b955050505050505b949350505050565b6060610b8573ffffffffffffffffffffffffffffffffffffffff83166014610fa9565b92915050565b60007f010000000000000000000000000000000000000000000000000000000000000083811614610bbe57506000610b85565b818015610bed57507f040000000000000000000000000000000000000000000000000000000000000083811614155b15610bfa57506000610b85565b7f080000000000000000000000000000000000000000000000000000000000000083811614610c74577ff0000000000000000000000000000000000000000000000000000000000000007f1000000000000000000000000000000000000000000000000000000000000000841601610c7457506000610b85565b50600192915050565b825182516000918591859190845b82811015610d4d5781610c9e82896116d0565b10610cb157600095505050505050610d57565b83610cbc82896116d0565b81518110610ccc57610ccc6116e3565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110610d0b57610d0b6116e3565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614610d4557600095505050505050610d57565b600101610c8b565b5060019450505050505b9392505050565b606083518015610e67576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526106708515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f52602083018181018388602001018051600082525b60038a0199508951603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f811651600353506000518452600484019350828410610dda5790526020016040527f3d3d000000000000000000000000000000000000000000000000000000000000600384066002048083039190915260008615159091029182900352900382525b509392505050565b8151602080840151835184830151604080519485018990528401949094526060830191909152608082015260a08101919091526000908190819060149060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ee79161183c565b600060405180830381855afa9150503d8060008114610f22576040519150601f19603f3d011682016040523d82523d6000602084013e610f27565b606091505b5091509150818015610f3a575080516020145b8015610f9f575080601f81518110610f5457610f546116e3565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f0100000000000000000000000000000000000000000000000000000000000000145b9695505050505050565b6060826000610fb9846002611893565b67ffffffffffffffff811115610fd157610fd16112eb565b6040519080825280601f01601f191660200182016040528015610ffb576020820181803683370190505b509050600061100b856002611893565b6110169060016116d0565b90505b60018111156110bd577f303132333435363738396162636465660000000000000000000000000000000083600f1660108110611057576110576116e3565b1a60f81b826110676002846118aa565b81518110611077576110776116e3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049290921c916110b6816118bd565b9050611019565b508115610b5a576040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600481018690526024810185905260440161034d565b60006040828403121561111257600080fd5b50919050565b6000806060838503121561112b57600080fd5b823567ffffffffffffffff81111561114257600080fd5b83016080818603121561115457600080fd5b91506111638460208501611100565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461118e57600080fd5b50565b600080600080600060c086880312156111a957600080fd5b6111b38787611100565b9450604086013593506060860135925060808601356111d18161116c565b915060a08601356111e18161116c565b809150509295509295909350565b600060a0828403121561111257600080fd5b60008060008060008060c0878903121561121a57600080fd5b86356112258161116c565b9550602087013567ffffffffffffffff81111561124157600080fd5b8701601f8101891361125257600080fd5b803567ffffffffffffffff81111561126957600080fd5b89602082840101111561127b57600080fd5b60209190910195509350604087013592506112998860608901611100565b915060a087013567ffffffffffffffff8111156112b557600080fd5b6112c189828a016111ef565b9150509295509295509295565b6000602082840312156112e057600080fd5b8135610d578161116c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561133d5761133d6112eb565b60405290565b60008067ffffffffffffffff84111561135e5761135e6112eb565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff821117156113ab576113ab6112eb565b6040528381529050808284018510156113c357600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126113ec57600080fd5b610d5783833560208501611343565b60006080823603121561140d57600080fd5b6040516080810167ffffffffffffffff81118282101715611430576114306112eb565b604052823567ffffffffffffffff81111561144a57600080fd5b611456368286016113db565b8252506020838101359082015260408301356114718161116c565b6040820152606092830135928101929092525090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114e7576114e7611487565b5060010190565b85815273ffffffffffffffffffffffffffffffffffffffff8516602082015260806040820152826080820152828460a0830137600060a08483010152600060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011683010190508260608301529695505050505050565b803561ffff8116811461157b57600080fd5b919050565b801515811461118e57600080fd5b803561157b81611580565b600060a082360312156115ab57600080fd5b6115b361131a565b823567ffffffffffffffff8111156115ca57600080fd5b6115d6368286016113db565b825250602083013567ffffffffffffffff8111156115f357600080fd5b830136601f82011261160457600080fd5b61161336823560208401611343565b60208301525061162560408401611569565b604082015261163660608401611569565b60608201526116476080840161158e565b608082015292915050565b6000604082840312801561166557600080fd5b506040805190810167ffffffffffffffff81118282101715611689576116896112eb565b604052823581526020928301359281019290925250919050565b8183823760009101908152919050565b6000602082840312156116c557600080fd5b8151610d5781611580565b80820180821115610b8557610b85611487565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b8381101561172d578181015183820152602001611715565b50506000910152565b6040815260008351806040840152611755816060850160208801611712565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201828103606090810160208086019190915285519183018290528501916000916080909101905b808310156117c557835182526020820191506020840193506001830192506117a2565b509695505050505050565b7f226368616c6c656e6765223a220000000000000000000000000000000000000081526000825161180881600d850160208701611712565b7f2200000000000000000000000000000000000000000000000000000000000000600d939091019283015250600e01919050565b6000825161184e818460208701611712565b9190910192915050565b60006020828403121561186a57600080fd5b5051919050565b60008351611883818460208801611712565b9190910191825250602001919050565b8082028115828204841417610b8557610b85611487565b81810381811115610b8557610b85611487565b6000816118cc576118cc611487565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220bd3a32cea54a2a93416912ef13348af824446ad593606e869880750c8fed0b3764736f6c634300081b0033";

type EoaAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EoaAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EoaAccount__factory extends ContractFactory {
  constructor(...args: EoaAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EoaAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EoaAccount__factory {
    return super.connect(runner) as EoaAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EoaAccountInterface {
    return new Interface(_abi) as EoaAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): EoaAccount {
    return new Contract(address, _abi, runner) as unknown as EoaAccount;
  }
}
