/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  EoaAccount,
  EoaAccountInterface,
} from "../../contracts/EoaAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [],
    name: "accountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "authProviderId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "r",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "s",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "authenticatorData",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "clientDataJSON",
            type: "string",
          },
          {
            internalType: "uint16",
            name: "challengeIndex",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "typeIndex",
            type: "uint16",
          },
          {
            internalType: "bool",
            name: "userVerificationRequired",
            type: "bool",
          },
        ],
        internalType: "struct WebAuthnP256.Metadata",
        name: "metadata",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getWebAuthnPublicKey",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofVerifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicKeyRegistry",
    outputs: [
      {
        internalType: "contract PublicKeyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "jwtIat",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "jwtNonce",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "publicKeyHash",
            type: "bytes32",
          },
        ],
        internalType: "struct JwtVerifierP256.VerificationData",
        name: "verificationData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "newP256PublicKey",
        type: "tuple",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "x",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "y",
            type: "uint256",
          },
        ],
        internalType: "struct ECDSA.PublicKey",
        name: "webauthnPublicKey_",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "accountId_",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "authProviderId_",
        type: "bytes32",
      },
      {
        internalType: "contract PublicKeyRegistry",
        name: "publicKeyRegistry_",
        type: "address",
      },
      {
        internalType: "contract UltraVerifier",
        name: "proofVerifier_",
        type: "address",
      },
    ],
    name: "setAccountId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "webauthnPublicKey",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506118a88061001f6000396000f3fe6080604052600436106100b55760003560e01c80639cfd7cff11610069578063affed0e01161004e578063affed0e0146101f1578063bb3da92d14610207578063c389ca271461025257600080fd5b80639cfd7cff146101bb578063ada4799c146101d157600080fd5b80637dc0872e1161009a5780637dc0872e1461010c5780637fa417b31461013c57806386aeebf71461018e57600080fd5b8063041c9ae6146100c15780636b124f5b146100e357600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506100e16100dc3660046110be565b610272565b005b3480156100ef57600080fd5b506100f960015481565b6040519081526020015b60405180910390f35b34801561011857600080fd5b50600554600654610127919082565b60408051928352602083019190915201610103565b34801561014857600080fd5b506003546101699073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b34801561019a57600080fd5b506002546101699073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101c757600080fd5b506100f960005481565b3480156101dd57600080fd5b506100e16101ec366004611137565b6103be565b3480156101fd57600080fd5b506100f960045481565b34801561021357600080fd5b50604080518082018252600080825260209182015281518083018352600554808252600654918301918252835190815290519181019190915201610103565b34801561025e57600080fd5b506100e161026d3660046111a7565b610491565b6040805182356020808301919091528301358183015290830135906060016040516020818303038152906040528051906020012014610312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f696e76616c696420576562417574686e207075626c6963206b6579000000000060448201526064015b60405180910390fd5b61034961031e83611384565b60005460015460025460035473ffffffffffffffffffffffffffffffffffffffff91821691166105f9565b6103af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610309565b80356005556020013560065550565b333014610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f742073656c660000000000000000000000000000000000000000000000006044820152606401610309565b84356005556020909401356006556000929092556001556002805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560038054929093169116179055565b60048054600091826104a283611436565b91905055878787876040516020016104be95949392919061146e565b60405160208183030381529060405280519060200120905061050f81836104e490611519565b6104f3368790038701876115d2565b60408051808201909152600554815260065460208201526108ec565b61051857600080fd5b60008773ffffffffffffffffffffffffffffffffffffffff16858888604051610542929190611623565b60006040518083038185875af1925050503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50509050806105ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f63616c6c206661696c65640000000000000000000000000000000000000000006044820152606401610309565b5050505050505050565b60608501516040517f5879142a00000000000000000000000000000000000000000000000000000000815260048101859052602481019190915260009073ffffffffffffffffffffffffffffffffffffffff841690635879142a90604401602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190611633565b6106fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7075626c6963206b65792068617368206d69736d6174636800000000000000006044820152606401610309565b600061070d8760400151610b1e565b80519091506003906000906107229083611650565b67ffffffffffffffff81111561073a5761073a611274565b604051908082528060200260200182016040528015610763578160200160208202803683370190505b509050600088828261077481611436565b93508151811061078657610786611663565b602002602001018181525050896020015160001b8282806107a690611436565b9350815181106107b8576107b8611663565b602090810291909101015260608a015182826107d381611436565b9350815181106107e5576107e5611663565b60200260200101818152505060005b84518110156108475784818151811061080f5761080f611663565b016020015160f81c838361082281611436565b94508151811061083457610834611663565b60209081029190910101526001016107f4565b5089516040517fea50d0e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169163ea50d0e49161089d919086906004016116b6565b602060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190611633565b9a9950505050505050505050565b60006025846000015151108061092e575061092c846000015160208151811061091757610917611663565b602001015160f81c60f81b8560800151610b31565b155b1561093b57506000610b16565b60006040518060400160405280601581526020017f2274797065223a22776562617574686e2e676574220000000000000000000000815250905061098c818660200151876060015161ffff16610c23565b61099a576000915050610b16565b60006109c9876040516020016109b291815260200190565b604051602081830303815290604052600180610d04565b90506000816040516020016109de9190611750565b6040516020818303038152906040529050610a06818860200151896040015161ffff16610c23565b610a165760009350505050610b16565b600060028860200151604051610a2c91906117bc565b602060405180830381855afa158015610a49573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a6c91906117d8565b905060006002896000015183604051602001610a899291906117f1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ac1916117bc565b602060405180830381855afa158015610ade573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b0191906117d8565b9050610b0e818989610e15565b955050505050505b949350505050565b6060610b2b826020610f4f565b92915050565b60007f010000000000000000000000000000000000000000000000000000000000000083811614610b6457506000610b2b565b818015610b9357507f040000000000000000000000000000000000000000000000000000000000000083811614155b15610ba057506000610b2b565b7f080000000000000000000000000000000000000000000000000000000000000083811614610c1a577ff0000000000000000000000000000000000000000000000000000000000000007f1000000000000000000000000000000000000000000000000000000000000000841601610c1a57506000610b2b565b50600192915050565b825182516000918591859190845b82811015610cf35781610c448289611650565b10610c5757600095505050505050610cfd565b83610c628289611650565b81518110610c7257610c72611663565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110610cb157610cb1611663565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614610ceb57600095505050505050610cfd565b600101610c31565b5060019450505050505b9392505050565b606083518015610e0d576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526106708515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f52602083018181018388602001018051600082525b60038a0199508951603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f811651600353506000518452600484019350828410610d805790526020016040527f3d3d000000000000000000000000000000000000000000000000000000000000600384066002048083039190915260008615159091029182900352900382525b509392505050565b8151602080840151835184830151604080519485018990528401949094526060830191909152608082015260a08101919091526000908190819060149060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610e8d916117bc565b600060405180830381855afa9150503d8060008114610ec8576040519150601f19603f3d011682016040523d82523d6000602084013e610ecd565b606091505b5091509150818015610ee0575080516020145b8015610f45575080601f81518110610efa57610efa611663565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f0100000000000000000000000000000000000000000000000000000000000000145b9695505050505050565b6060826000610f5f846002611813565b67ffffffffffffffff811115610f7757610f77611274565b6040519080825280601f01601f191660200182016040528015610fa1576020820181803683370190505b5090506000610fb1856002611813565b610fbc906001611650565b90505b6001811115611063577f303132333435363738396162636465660000000000000000000000000000000083600f1660108110610ffd57610ffd611663565b1a60f81b8261100d60028461182a565b8151811061101d5761101d611663565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049290921c9161105c8161183d565b9050610fbf565b508115610b16576040517fe22e27eb0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604401610309565b6000604082840312156110b857600080fd5b50919050565b600080606083850312156110d157600080fd5b823567ffffffffffffffff8111156110e857600080fd5b8301608081860312156110fa57600080fd5b915061110984602085016110a6565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461113457600080fd5b50565b600080600080600060c0868803121561114f57600080fd5b61115987876110a6565b94506040860135935060608601359250608086013561117781611112565b915060a086013561118781611112565b809150509295509295909350565b600060a082840312156110b857600080fd5b60008060008060008060c087890312156111c057600080fd5b86356111cb81611112565b9550602087013567ffffffffffffffff8111156111e757600080fd5b8701601f810189136111f857600080fd5b803567ffffffffffffffff81111561120f57600080fd5b89602082840101111561122157600080fd5b602091909101955093506040870135925061123f88606089016110a6565b915060a087013567ffffffffffffffff81111561125b57600080fd5b61126789828a01611195565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156112c6576112c6611274565b60405290565b60008067ffffffffffffffff8411156112e7576112e7611274565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff8211171561133457611334611274565b60405283815290508082840185101561134c57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261137557600080fd5b610cfd838335602085016112cc565b60006080823603121561139657600080fd5b6040516080810167ffffffffffffffff811182821017156113b9576113b9611274565b604052823567ffffffffffffffff8111156113d357600080fd5b6113df36828601611364565b8252506020838101359082015260408084013590820152606092830135928101929092525090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361146757611467611407565b5060010190565b85815273ffffffffffffffffffffffffffffffffffffffff8516602082015260806040820152826080820152828460a0830137600060a08483010152600060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011683010190508260608301529695505050505050565b803561ffff811681146114fb57600080fd5b919050565b801515811461113457600080fd5b80356114fb81611500565b600060a0823603121561152b57600080fd5b6115336112a3565b823567ffffffffffffffff81111561154a57600080fd5b61155636828601611364565b825250602083013567ffffffffffffffff81111561157357600080fd5b830136601f82011261158457600080fd5b611593368235602084016112cc565b6020830152506115a5604084016114e9565b60408201526115b6606084016114e9565b60608201526115c76080840161150e565b608082015292915050565b600060408284031280156115e557600080fd5b506040805190810167ffffffffffffffff8111828210171561160957611609611274565b604052823581526020928301359281019290925250919050565b8183823760009101908152919050565b60006020828403121561164557600080fd5b8151610cfd81611500565b80820180821115610b2b57610b2b611407565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b838110156116ad578181015183820152602001611695565b50506000910152565b60408152600083518060408401526116d5816060850160208801611692565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201828103606090810160208086019190915285519183018290528501916000916080909101905b808310156117455783518252602082019150602084019350600183019250611722565b509695505050505050565b7f226368616c6c656e6765223a220000000000000000000000000000000000000081526000825161178881600d850160208701611692565b7f2200000000000000000000000000000000000000000000000000000000000000600d939091019283015250600e01919050565b600082516117ce818460208701611692565b9190910192915050565b6000602082840312156117ea57600080fd5b5051919050565b60008351611803818460208801611692565b9190910191825250602001919050565b8082028115828204841417610b2b57610b2b611407565b81810381811115610b2b57610b2b611407565b60008161184c5761184c611407565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212203f22bb7235bce02d50af5a5b2393bc0bef4f88f5a8507ac1c5e54b721453ca1e64736f6c634300081b0033";

type EoaAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EoaAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EoaAccount__factory extends ContractFactory {
  constructor(...args: EoaAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EoaAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EoaAccount__factory {
    return super.connect(runner) as EoaAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EoaAccountInterface {
    return new Interface(_abi) as EoaAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): EoaAccount {
    return new Contract(address, _abi, runner) as unknown as EoaAccount;
  }
}
