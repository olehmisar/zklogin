/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PublicKeyRegistry,
  PublicKeyRegistryInterface,
} from "../../contracts/PublicKeyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "providerId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
    ],
    name: "checkPublicKey",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[18]",
        name: "publicKeyLimbs",
        type: "uint256[18]",
      },
      {
        internalType: "uint256[18]",
        name: "publicKeyRedcLimbs",
        type: "uint256[18]",
      },
    ],
    name: "getPublicKeyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "isPublicKeyHashValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "providerId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKeyHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    name: "setPublicKeyValid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61052c806100a06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806380a798cf1161005b57806380a798cf146100f05780638da5cb5b1461011e578063c059d83b14610146578063f2fde38b1461015957600080fd5b806349edb8ae146100825780635879142a146100a8578063715018a6146100e6575b600080fd5b6100956100903660046103de565b61016c565b6040519081526020015b60405180910390f35b6100d66100b6366004610415565b600091825260016020908152604080842092845291905290205460ff1690565b604051901515815260200161009f565b6100ee61017f565b005b6100d66100fe366004610415565b600160209081526000928352604080842090915290825290205460ff1681565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100ee610154366004610437565b610193565b6100ee610167366004610475565b6101e3565b6000610178838361024c565b9392505050565b61018761027f565b61019160006102d2565b565b61019b61027f565b6000928352600160209081526040808520938552929052912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6101eb61027f565b73ffffffffffffffffffffffffffffffffffffffff8116610240576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610249816102d2565b50565b600082826040516020016102619291906104d4565b60405160208183030381529060405280519060200120905092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610191576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610237565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f83011261035857600080fd5b604051610240810181811067ffffffffffffffff821117156103a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806102408401858111156103b957600080fd5b845b818110156103d35780358352602092830192016103bb565b509195945050505050565b60008061048083850312156103f257600080fd5b6103fc8484610347565b915061040c846102408501610347565b90509250929050565b6000806040838503121561042857600080fd5b50508035926020909101359150565b60008060006060848603121561044c57600080fd5b83359250602084013591506040840135801515811461046a57600080fd5b809150509250925092565b60006020828403121561048757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461017857600080fd5b8060005b60128110156104ce5781518452602093840193909101906001016104af565b50505050565b6104de81846104ab565b6104ec6102408201836104ab565b610480019291505056fea26469706673582212202df3081cb9265da914fcfc52a00140a33c64498c1ae442e6f0e8ce7120b2fcab64736f6c634300081b0033";

type PublicKeyRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PublicKeyRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PublicKeyRegistry__factory extends ContractFactory {
  constructor(...args: PublicKeyRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PublicKeyRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PublicKeyRegistry__factory {
    return super.connect(runner) as PublicKeyRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicKeyRegistryInterface {
    return new Interface(_abi) as PublicKeyRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PublicKeyRegistry {
    return new Contract(address, _abi, runner) as unknown as PublicKeyRegistry;
  }
}
